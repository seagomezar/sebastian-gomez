{"pages":[{"title":"all-archives","path":"all-archives/index.html","permalink":"https://sebastian-gomez-blog.firebaseapp.com/all-archives/index.html","content":""},{"title":"all-categories","path":"all-categories/index.html","permalink":"https://sebastian-gomez-blog.firebaseapp.com/all-categories/index.html","content":""},{"title":"all-tags","path":"all-tags/index.html","permalink":"https://sebastian-gomez-blog.firebaseapp.com/all-tags/index.html","content":""}],"posts":[{"title":"Implementando of como operador en Observables","path":"implementando-of-como-operador-en-observables/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/implementando-of-como-operador-en-observables/","content":"<!-- excerpt --></p>\n<p>En los <a href=\"https://www.sebastian-gomez.com/desarrollo-web/implementando-filter-como-operador-en-observables/\" target=\"_blank\" rel=\"noopener\">posts anteriores</a> tuvimos un acercamiento a la implementación del operador filter y el operador map en observables, lo implementamos desde cero similarmente a como lo hace RX.js para entender un poco más la filosofía y el funcionamiento interno. En este post vamos a aumentar el número de operadores que podemos implementar y usar dentro de un Observable creando el operador “of” que básicamente será un operador de generación de observables de manera que podamos convertir datos en observables, veamos un ejemplo de lo que buscamos:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fancyObservable = Observable.of(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fancySubscription = fancyObservable.subscribe({</span><br><span class=\"line\">  next(e) {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// “e” </span></span><br><span class=\"line\">  }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>En este caso te estarás preguntando, ¿porqué es esto importante? ¿Que sentido tiene convertir una dato ya desenvuelto en un Observable? Bien, la respuesta más inmediata es porque a veces necesitas combinar datos “puros” con datos que provienen de Observables y más adelante veremos maneras de combinar observables más no tenemos manera de combinar datos “puros” con observables sin primero llevar los datos a Observables.</p>\n<p>Antes de empezar la implementación recordemos cual es la definición más pura de un Observable con una función generadora de observables a partir de eventos:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>{  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(subscribe) {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._subscribe = subscribe;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  subscribe(observer) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._subscribe(observer);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">static</span> fromEvent(domElement, eventName) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> { observer.next(ev) };</span><br><span class=\"line\">      domElement.addEventListener(eventName, handler);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> {</span><br><span class=\"line\">        unsubscribe() {</span><br><span class=\"line\">          domElement.removeEventListener(eventName, handler);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    });</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Similarmente al operador fromEvent debemos crear el operador Of de manera estática es decir que esta función va estar ligada al prototipo (prototype) sin importar si existe o no una instancia de un Observable. Diferente a lo que pasaba con las funciones filter y map que definitivamente solo se invocaban si ya tenían un observable instancia.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">of</span>(value) {…}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Ahora revisando la definición de frontEvent nos damos cuenta que solo esta retornando un valor a la vez cada ves que ocurre un nuevo evento, en nuestro caso para el operador “of” solo habrá un evento ya que hay un único dato e inmediatamente debemos completar el observable:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observer.next(value);</span><br><span class=\"line\">observer.complete();</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>¿Super fácil no?, ahora pongamos todo junto y tendremos la definición completa de nuestro operador of:<br><figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">of</span>(value) {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">    observer.next(value);</span><br><span class=\"line\">    observer.complete();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> {</span><br><span class=\"line\">      unsubscribe() {}</span><br><span class=\"line\">    };</span><br><span class=\"line\">  });</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>\n<p>Finalmente aquí está el ejemplo completo con la implementación de filter, map y nuestro nuevo operador of:</p>\n<p><a href=\"https://codepen.io/seagomezar/pen/rvZZev?editors=0011\" target=\"_blank\" rel=\"noopener\">https://codepen.io/seagomezar/pen/rvZZev</a></p>\n<p>Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza de los operadores sobre observables. déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>"},{"title":"Implementando filter como operador en Observables","path":"implementando-filter-como-operador-en-observables/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/implementando-filter-como-operador-en-observables/","content":"<!-- excerpt --></p>\n<p>En el <a href=\"https://www.sebastian-gomez.com/desarrollo-web/implementando-map-como-operador-en-observables/\" target=\"_blank\" rel=\"noopener\">post anterior</a> tuvimos un primer acercamiento a la implementación del operador map en observables, lo implementamos desde cero similarmente a como lo hace RX.js. En este post vamos a aumentar el número de operadores que podemos implementar y usar dentro de un Observable añadiendo el operador map. Primero recordemos cual es la definición más pura de un Observable con una función generadora de observables a partir de eventos:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>{  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(subscribe) {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._subscribe = subscribe;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  subscribe(observer) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._subscribe(observer);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">static</span> fromEvent(domElement, eventName) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> { observer.next(ev) };</span><br><span class=\"line\">      domElement.addEventListener(eventName, handler);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> {</span><br><span class=\"line\">        unsubscribe() {</span><br><span class=\"line\">          domElement.removeEventListener(eventName, handler);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    });</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>De esta manera tu puedes crear Observables que te devolverán información del evento de la siguiente manera:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicks = Observable.fromEvent(button, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicksSubscription = clicks.subscribe({</span><br><span class=\"line\">  next(e) {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Click in the button”, e); // “e” contiene toda la información del evento</span></span><br><span class=\"line\"><span class=\"string\">  }</span></span><br><span class=\"line\"><span class=\"string\">});</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">clicksSubscription.unsubscribe(); // De esta manera te puedes des-suscribir</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Sin embargo es probable que necesitemos hacer más operaciones sobre la cadena de datos, imagínate si quizá requiramos solamente obtener sólo algunos datos del evento por ejemplo solo la posición del Mouse. O imagínate si sólo queremos escuchar por los clicks que se hagan en la parte izquierda del botón. Pues bien vamos a implementar dos funciones que quizá ya conozcas porque se usan principalmente para el procesamiento de arrays. Vamos a implementar la función filter sobre Observables. Pero antes veamos un ejemplo sobre como es su funcionamiento sobre Arrays en javascript para luego traerlo a nuestra definición de observables e implementarlo allí.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].filter(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span> x &gt; <span class=\"number\">3</span>) </span><br><span class=\"line\"><span class=\"comment\">// retorna [4]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como vez similarmente que map, filter recibe como parámetro una función, solo que en este casó es de validación es decir retorna “true” o “false”. Valiendose de esta función el operador filter retorna el elemento para el cual la función de validación es “true”. Revisemos como sería la implementación si sobre arrays para luego extenderla a Observables.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter(validationFunction) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscription = self.subscribe({</span><br><span class=\"line\">      next(v) {</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(validationFunction(v)) {</span><br><span class=\"line\">          observer.next(v);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      },</span><br><span class=\"line\">      error (e) {</span><br><span class=\"line\">        observer.error(e);</span><br><span class=\"line\">      },</span><br><span class=\"line\">      complete () {</span><br><span class=\"line\">        observer.complete();</span><br><span class=\"line\">      }</span><br><span class=\"line\">    });</span><br><span class=\"line\">    <span class=\"keyword\">return</span> subscription;</span><br><span class=\"line\">  });</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>¿Es más simple esta vez, no? En general los operadores sobre observables siguen la misma lógica. Todos (O al menos la mayoría) deben retornar un nuevo observable y las operaciones o filtros sobre los valores se deben hacer sobre la función next. Finalmente veamos como usar el operador filter sobre observables para filtrar los clicks que se hacen sobre un botón pero que cumplen el criterio de encontrarse sobre el lado izquierdo del mouse.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicks = Observable.fromEvent(button, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicksSubscription = clicks.filter(<span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> ev.offsetX &lt; <span class=\"number\">40</span>).map(<span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> ev.offsetX ).subscribe({</span><br><span class=\"line\">  next(offSetX) {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"La posición del mouse respecto a X \"</span> + offSetX); <span class=\"comment\">// Solo imprime si haces click a la izquerda de \"Me\"</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Finalmente aquí está el ejemplo completo con la implementación de filter y map:</p>\n<p><a href=\"https://codepen.io/seagomezar/pen/WdVzxB\" target=\"_blank\" rel=\"noopener\">https://codepen.io/seagomezar/pen/WdVzxB</a></p>\n<p>Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza de los operadores sobre observables. déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>"},{"title":"Implementando map como operador en Observables","path":"implementando-map-como-operador-en-observables/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/implementando-map-como-operador-en-observables/","content":"<!-- excerpt --></p>\n<p>En el <a href=\"https://www.sebastian-gomez.com/desarrollo-web/implementando-observables-a-partir-de-eventos-en-js/\" target=\"_blank\" rel=\"noopener\">post anterior</a> tuvimos un primer acercamiento a la definición más pura de lo que es un Observable y lo implementamos desde cero similarmente a como lo hace RX.js. En este post vamos a valernos de esta definición para aumentar el número de operadores que podemos implementar y usar dentro de un Observable. Primero recordemos cual es la definición más pura de un observable con una función generadora de observables a partir de eventos:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>{  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(subscribe) {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._subscribe = subscribe;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  subscribe(observer) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._subscribe(observer);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">static</span> fromEvent(domElement, eventName) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> { observer.next(ev) };</span><br><span class=\"line\">      domElement.addEventListener(eventName, handler);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> {</span><br><span class=\"line\">        unsubscribe() {</span><br><span class=\"line\">          domElement.removeEventListener(eventName, handler);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    });</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>De esta manera tu puedes crear Observables que te devolverán información del evento de la siguiente manera:<br><figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicks = Observable.fromEvent(button, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicksSubscription = clicks.subscribe({</span><br><span class=\"line\">  next(e) {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Click in the button”, e); // “e” contiene toda la información del evento</span></span><br><span class=\"line\"><span class=\"string\">  }</span></span><br><span class=\"line\"><span class=\"string\">});</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">clicksSubscription.unsubscribe(); // De esta manera te puedes des-suscribir</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>\n<p>Sin embargo es probable que necesitemos hacer más operaciones sobre la cadena de datos, imagínate si quizá requiramos solamente obtener sólo algunos datos del evento por ejemplo solo la posición del Mouse. O imagínate si sólo queremos escuchar por los clicks que se hagan en la parte izquierda del botón. Pues bien vamos a implementar dos funciones que quizá ya conozcas porque se usan principalmente para el procesamiento de arrays. Vamos a implementar la función “map” sobre observables. Pero antes veamos un ejemplo sobre como es su funcionamiento sobre Arrays en javascript para luego traerlo a nuestra definición de observables e implementarlo allí.</p>\n<p>Empecemos con la función map. La función map es una función pura que itera sobre cada elemento de un array y “mapea” cada item de un array en otro. Veamos un ejemplo:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>\\].map( <span class=\"function\"><span class=\"params\">elemento</span> =&gt;</span> elemento * <span class=\"number\">2</span>); </span><br><span class=\"line\"><span class=\"comment\">// Retorna [1, 4, 6]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Ahora bien ¿Como hace internamente esta función para retornar este resultado? Básicamente la función map recibe como parámetro una función de proyección o transformación y aplica dicha función a cada uno de los elementos que pasan como parámetro. Esto hace que sin afectar el array original pueda devolver en nuevo arreglo con la función de proyección aplicada a cada item dentro del array. Veamos como sería la implementación de la función map para arrays:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.map = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">projectionFunction</span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">const</span> results = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">itemInArray</span>) </span>{</span><br><span class=\"line\">    results.push(projectionFunction(itemInArray));</span><br><span class=\"line\">  });</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>¿Hermosa no? Ahora que te parece si nos arriesgamos a escribir lo mismo para observables. Similarmente que para arreglos, vamos a necesitar como parámetro una función de proyección que nos permita transformar cada valor que retorna el observable. Adicionalmente queremos retornar un observable también al que nos podamos subscribir. Empecemos por solo esas dos cosas que te acabó de decir:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>{  </span><br><span class=\"line\">  …</span><br><span class=\"line\">  map(projectionFunction) {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">      <span class=\"keyword\">const</span> subscription = self.subscribe({</span><br><span class=\"line\">        next(v) {</span><br><span class=\"line\">        },</span><br><span class=\"line\">        error (e) {</span><br><span class=\"line\">        },</span><br><span class=\"line\">        complete () {</span><br><span class=\"line\">        }</span><br><span class=\"line\">      });</span><br><span class=\"line\">      <span class=\"keyword\">return</span> subscription;</span><br><span class=\"line\">    });</span><br><span class=\"line\">  }</span><br><span class=\"line\">  …</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Simple, ¿no? Como verás hemos definido la función map que ya no es “static” ya que no se puede aplicar sobre la definición abstracta de Observable sino sobre instancias de dicha clase. Adicionalmente recibimos como parámetro una función de proyección que es la que transformará cada valor que retorne la función interna next, y finalmente retornamos la subscripción para que sea posible suscribirnos al observable que justo acabamos de crear. Veamos entonces como podemos aplicar la función de proyección a cada elemento que retornemos dentro de la función next.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>{  </span><br><span class=\"line\">  …</span><br><span class=\"line\">  map(projectionFunction) {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">      <span class=\"keyword\">const</span> subscription = self.subscribe({</span><br><span class=\"line\">        next(v) {</span><br><span class=\"line\">            <span class=\"keyword\">const</span> value = projectionFunction(v);</span><br><span class=\"line\">            observer.next(value);</span><br><span class=\"line\">        },</span><br><span class=\"line\">        error (e) {</span><br><span class=\"line\">        },</span><br><span class=\"line\">        complete () {</span><br><span class=\"line\">        }</span><br><span class=\"line\">      });</span><br><span class=\"line\">      <span class=\"keyword\">return</span> subscription;</span><br><span class=\"line\">    });</span><br><span class=\"line\">  }</span><br><span class=\"line\">  …</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como ves no hicimos otra cosa que usar la función de transformación sobre cada valor que queremos enviar al observador. Eso es todo!, esta definida nuestra función map dentro de la definición que tenemos de Observable. Ajustemos un poco más esta definición previniendo posibles errores inesperados:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>{  </span><br><span class=\"line\">  …</span><br><span class=\"line\">  map(projection) {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">      <span class=\"keyword\">const</span> subscription = self.subscribe({</span><br><span class=\"line\">        next(v) {</span><br><span class=\"line\">          <span class=\"keyword\">let</span> value;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            value = projection(v);</span><br><span class=\"line\">            observer.next(value);</span><br><span class=\"line\">          }</span><br><span class=\"line\">          <span class=\"keyword\">catch</span>(e) {</span><br><span class=\"line\">            observer.error(e);</span><br><span class=\"line\">            subscription.unsubscribe();</span><br><span class=\"line\">          }</span><br><span class=\"line\">        },</span><br><span class=\"line\">        error (e) {</span><br><span class=\"line\">          observer.error(e);</span><br><span class=\"line\">        },</span><br><span class=\"line\">        complete () {</span><br><span class=\"line\">          observer.complete();</span><br><span class=\"line\">        }</span><br><span class=\"line\">      });</span><br><span class=\"line\">      <span class=\"keyword\">return</span> subscription;</span><br><span class=\"line\">    });</span><br><span class=\"line\">  }</span><br><span class=\"line\">  …</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Con lo anterior queda completa nuestra función map en la definición de observable. Veamos ahora como podemos usarla para transformar los datos dentro de nuestro observable, obteniendo solamente la posición del mouse en el momento que hizo click sobre el botón.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicks = Observable.fromEvent(button, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicksSubscription = clicks.map(<span class=\"function\"><span class=\"params\">ev</span> =&gt;</span>ev.offsetX).subscribe({</span><br><span class=\"line\">  next(offSetX) {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(offSetX);</span><br><span class=\"line\">  }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>En el siguiente Codepen podrás revisar la definición completa:</p>\n<ul>\n<li><a href=\"https://codepen.io/seagomezar/pen/zpgROb?editors=1011\" target=\"_blank\" rel=\"noopener\">https://codepen.io/seagomezar/pen/zpgROb</a></li>\n</ul>\n<p>Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza del operador map sobre observables. déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>"},{"title":"Implementando Observables a partir de Eventos en JS","path":"implementando-observables-a-partir-de-eventos-en-js/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/implementando-observables-a-partir-de-eventos-en-js/","content":"<!-- excerpt --></p>\n<p>Nos encontramos en la ola de la programación reactiva y funcional, y a pesar de todas la ventajas que ofrece aún es desconocida para la mayoría de desarrolladores sobre todo aquellos desarrolladores jóvenes. En éste post vamos a tratar de implementar la definición más pura de observable y la función generadora de observables más común como ya lo tiene implementado RX.js con el fin de entender a profundidad el concepto.</p>\n<p>La manera más natural de acercarse a los observables es entendiendo que es  la combinación de dos patrones de diseño en Javascript: Uno es el <a href=\"https://www.sebastian-gomez.com/desarrollo-web/patron-iterador-iterator-pattern-en-javascript/\" target=\"_blank\" rel=\"noopener\">patrón iterador</a> que lo explico en este post, y el segundo es el <a href=\"https://www.sebastian-gomez.com/desarrollo-web/entendiendo-el-patron-observador-observer-pattern-en-javascript/\" target=\"_blank\" rel=\"noopener\">patrón observer</a> que también lo explico en este post, sin embargo no es la manera más fácil. Una vez que hayas leido estos dos patrones y al menos tengas una idea en la cabeza de lo que son y significan un observable no es más que una función en Javascript con otra función en su interior que retorna un Objeto (JSON) con tres funciones en su interior. onNext, onComplete y onError. En primer lugar escribamos en Javascript lo que te acabo de narrar:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 &amp; 6 (Antiguo estándar)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observable</span>(<span class=\"params\">forEach</span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._forEach = forEach;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Observable.prototype = {</span><br><span class=\"line\">  forEach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onNext, onError, onCompleted</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onNext === <span class=\"string\">\"function\"</span>) {</span><br><span class=\"line\">      <span class=\"comment\">/* la función se invocó explicitamente con </span></span><br><span class=\"line\"><span class=\"comment\">      * (onNext: ()=&gt; ...., onError: () =&gt; ....., onComplete: () =&gt; ....) */</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._forEach({</span><br><span class=\"line\">        onNext: onNext,</span><br><span class=\"line\">        onError: onError || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{},</span><br><span class=\"line\">        onCompleted: onCompleted || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{}</span><br><span class=\"line\">      })</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"comment\">/* la función se invocó explicitamente con un objeto en lugar de tres funciones</span></span><br><span class=\"line\"><span class=\"comment\">      * {onNext: ()=&gt; ...., onError: () =&gt; ....., onComplete: () =&gt; ....} */</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._forEach(onNext);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como te dije es una función llamada Observable que recibe como parámetro una función que en este caso la llamamos forEach, ¡Y Sí! Tiene todo que ver con la función ForEach que usamos con los arreglos en Javascript. Como verás esta función la implementamos de manera interna en el Observable para hacerla propia de la definición del Observable. Como verás en la invocación de la función forEach, asumimos que la van a invocar enviándole tres parámetros, onNext, onError y onComplete y que lo único que haremos será detectar si han enviado cada función como parámetro o si han enviado las tres funciones dentro un objeto JSON, y en cualquier caso devolvemos recursivamente la invocación del forEach nuevamente con la declaración en su interior.</p>\n<p>Wait what? …</p>\n<p>Sí, tal vez esto hasta aquí te estalló un poco la cabeza, la programación con observables suele cambiar el paradigma con el cual escribimos código, trataré de mostrarte un ejemplo para que sirve lo que hemos hecho escrito allí arriba, pero antes añadamos una función al enredado bloque de código de arriba. Imagínate que quieres mostrar un console.log(“Hizo click”); cada vez que un usuario hace click en un botón de tu sitio web. Para ello vamos a crear una función estática dentro de la definición de observable que creamos arriba que convertirá un evento del DOM en un observable:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.fromEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom, eventName</span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEach</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> handler = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> observer.onNext(e);</span><br><span class=\"line\">    dom.addEventListener(eventName, handler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> {</span><br><span class=\"line\">      dispose: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {</span><br><span class=\"line\">      dom.removeEventListener(eventName, handler)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  });</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como verás la función fromEvent recibe un elemento del DOM y el nombre del evento sobre el que queremos hacer seguimiento y retorna un observable sobre que nos retorna el evento cada vez que se ejecuta la acción dentro de la función onNext. Adicionalmente un Observable siempre debe retornar un objeto que llamaremos subscripción que tiene la responsabilidad de proveer una manera de dessuscribirnos al observable en caso de que no deseemos recibir mas información esta es la responsabilidad de la función dispose. Ahora veamos como usamos los dos bloques de código juntos para capturar los eventos cada vez que hagamos click sobre un botón.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicks = Observable.fromEvent(button, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicksSubscription = clicks.forEach( <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"El usuario hizo click\"</span>, event);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Bien veamos ahora como podemos hacer lo mismo usando completamente ES7, lo primero que tenemos que tener presente es que la función forEach por convención es reemplazada por la función subscribe. Y nos valdremos de las palabras reservadas class y static para crear nuestra implementación de observable. Veamos entonces en primer lugar como implementamos la definición pura de observable:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>{  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(subscribe) {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._subscribe = subscribe;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  subscribe(observer) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._subscribe(observer);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como verás aprovechándonos de la definición de clase y constructor se hace mas corta la implementación del observable. Ademas en esta nueva definición no nos importa en absoluto como el observador (observer) envía las funciones onNext, onComplete y onError (Que por cierto por convención se cambian a next, error y complete). Veamos entonces como implementamos la función fromEvent para crear observables a partir de eventos.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>{</span><br><span class=\"line\">  …</span><br><span class=\"line\">  <span class=\"keyword\">static</span> fromEvent(domElement, eventName) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">observer</span>) </span>{</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> { observer.next(ev) };</span><br><span class=\"line\">      domElement.addEventListener(eventName, handler);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> {</span><br><span class=\"line\">        unsubscribe() {</span><br><span class=\"line\">          domElement.removeEventListener(eventName, handler);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    });</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Análogamente la ejecución del observable se realiza de manera similar a la ejecución del observable en el antiguo estándar con la diferencia que en lugar de usar la función forEach, usamos la función subscribe:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicks = Observable.fromEvent(button, <span class=\"string\">\"click\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clicksSubscription = clicks.subscribe({</span><br><span class=\"line\">  next(e) {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Click in the button\"</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como verás en los dos bloques de código anteriores notaras que la diferencia entre el estándar viejo o antiguo para crear la definición pura más simple de un observable es significativamente mas larga y más descriptiva que el estándar nuevo y esto se debe a que usando el estándar nuevo dejamos por completo la implementación de las funciones onNext, onComplete y onError al observador que en adelante serán llamadas next, complete y error (sin el “on” al comienzo) verás que la invocación y ejecución del observable es muy similar usando ambos estándares.</p>\n<p>Como notarás un observable no se ejecuta a menos que tengas un subscriptor que este escuchando los eventos mediante el subscribe o el forEach respectivamente y esto se debe a que por naturaleza los observables son fríos (Cold or lazy observables) es decir que no hacen nada a menos que tengan a alguien que los escuche.</p>\n<p>Finalmente para dessuscribirte de un Observable puedes usar el método dispose que o unsubscribe que viene junto con la subscripción de la siguiente manera:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Estandar antiguo</span></span><br><span class=\"line\">clicksSubscription.dispose();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Estándar nuevo</span></span><br><span class=\"line\">clicksSubscription.unsubscribe();</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Sin embargo recuerda que si te dessuscribes antes de escuchar por el observable no obtendrás ningún evento, es decir una implementación como la siguiente solo nos permitiría obtener únicamente el primer click sobre el botón:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> clicksSubscription = clicks.subscribe({</span><br><span class=\"line\">  next(e) {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Click in the button\"</span>);</span><br><span class=\"line\">    clicksSubscription.unsubscribe();</span><br><span class=\"line\">  };</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>En los siguientes links encontrarás la implementación: </p>\n<ul>\n<li><a href=\"https://codepen.io/seagomezar/pen/aEVZmv\" target=\"_blank\" rel=\"noopener\">Usando el estándar Antiguo (forEach)</a> </li>\n<li><a href=\"https://codepen.io/seagomezar/pen/MrOeyd\" target=\"_blank\" rel=\"noopener\">Usando el estándar Nuevo (Subscribe)</a></li>\n</ul>\n<p>Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza de los observables. déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>"},{"title":"Entendiendo el patrón observador \"Observer Pattern\" en Javascript","path":"entendiendo-el-patron-observador-observer-pattern-en-javascript/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/entendiendo-el-patron-observador-observer-pattern-en-javascript/","content":"<!-- excerpt --></p>\n<p>El patrón observador es uno de los patrones de diseño de software más usado en Javascript. De el se extienden importantes aplicaciones que pueden ayudar a definir mejores arquitecturas en aplicaciones web, por lo que su uso y estudio es altamente recomendado. En este post aprenderemos como implementarlo en Javascript y en que situaciones lo podemos usar.</p>\n<p>En primer lugar el patrón observador se define como un patrón de comportamiento es decir que dentro del mundo de la programación orientada a objetos es un patrón responsable por la comunicación entre objetos.</p>\n<p>En segundo lugar el patrón observador también puedes encontrarlo como el patrón publicador-subscriptor o modelo-patrón y nos da una idea básica de lo que hace. En términos simples este patrón permite la notificación a objetos (subscriptores u observador) al cambio de otro objeto (publicador).</p>\n<p>Veamos entonces un pequeño diagrama con las responsabilidades de los involucrados en este patrón. En primer lugar el publicador debe notificar a los subscriptores o observadores que algo cambió, y en segundo lugar los subscriptores deben poder subscribirse o de suscribirse del publicador en cualquier momento:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/02/A004581F-4C80-4ADA-A5A5-A298253AF072.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/02/A004581F-4C80-4ADA-A5A5-A298253AF072.png\" alt=\"\"></a></p>\n<p>¿Cómo podemos entonces implementarlo en Javascript?, empecemos implementando una clase llamada Publicador que contenga los métodos subscribe(), unsubscribe(), y notify().</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Publicador</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() {</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscriptors = \\[\\];</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    subscribe(subscriptor) {</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscriptors.push(subscriptor);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  </span><br><span class=\"line\">    unsubscribe(subscriptor) {</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscriptors = <span class=\"keyword\">this</span>.subscriptors.filter( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== subscriptor );</span><br><span class=\"line\">    }</span><br><span class=\"line\">  </span><br><span class=\"line\">    notify(event) {</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscriptors.forEach( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> {</span><br><span class=\"line\">        item.call(<span class=\"keyword\">this</span>, event); </span><br><span class=\"line\">      });</span><br><span class=\"line\">    }  </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como verás hemos manejado la lista de subscriptores con un array de Javascript como propiedad de la clase así es posible fácilmente subscribir y des-subscribir subscriptores. También la función notify itera sobre cada uno de los subscriptores y se encarga de invocarlos con el evento.</p>\n<p>Ahora imaginemos que usaremos esta definición de Publicador para un periódico que regularmente publica nuevas ediciones.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> periodico = <span class=\"keyword\">new</span> Publicador();</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Bien, pensemos un poco más acerca de los clientes. Estos van a necesitar saber cuando llegue una nueva versión del periódico. Inicialmente pensemos en que los clientes son funciones:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\">edicion</span>) </span>{</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"LLegó una nueva edición con el nombre de: \"</span> + edicion);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">periodico.subscribe(Observer);</span><br><span class=\"line\">periodico.subscribe(Observer); </span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Nueva edicion\"</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Con esta definición anterior al ejecutarlo obtenemos algo así:</p>\n<p>“LLegó una nueva edición con el nombre de: Nueva edicion”<br>“LLegó una nueva edición con el nombre de: Nueva edicion”</p>\n<p>Si queremos ser conscientes de que cliente recibió que edición del periódico podemos retocar un poco las definiciones de la función notify y de la función observer:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Publicador</span> </span>{</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  notify(event) {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subscriptors.forEach( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> {</span><br><span class=\"line\">      item.call(<span class=\"keyword\">this</span>, index, event); </span><br><span class=\"line\">      index++;</span><br><span class=\"line\">    });</span><br><span class=\"line\">  }  </span><br><span class=\"line\">  ...</span><br><span class=\"line\">}</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\">index, edicion</span>) </span>{</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Al Observador #\"</span> + </span><br><span class=\"line\">              index + <span class=\"string\">\" le llegó una nueva edición con el nombre de: \"</span> + </span><br><span class=\"line\">              edicion);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>De esta manera tenemos como output algo mucho mas entendible:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Al Observador #0 le llegó una nueva edición con el nombre de: Nueva edicion\"</span>  </span><br><span class=\"line\"><span class=\"string\">\"Al Observador #1 le llegó una nueva edición con el nombre de: Nueva edicion\"</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Sin embargo como un mejor acercamiento podríamos definir una clase para los clientes que nos permita crear instancias de ella y tener un control mas granular. También debemos definir un método únicamente diseñado para escuchar por nuevas decisiones del periódico.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observador</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(id) {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Se ha creado el subscriptor #: \"</span> + id);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  buzon(edicion) {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Subscriptor # \"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\" recibió una nueva edición: \"</span> + edicion);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscriptor1 = <span class=\"keyword\">new</span> Subscriptor(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> subscriptor2 = <span class=\"keyword\">new</span> Subscriptor(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> subscriptor3 = <span class=\"keyword\">new</span> Subscriptor(<span class=\"number\">3</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>De esta forma podemos tener más control sobre los subscriptores y podemos subscribirlos y des-subscribirlos de mejor manera. A continuación verás como publicar multiples ediciones de un perioido así como la habilidad suscribir y des-suscribir clientes:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">periodico.subscribe(subscriptor1);</span><br><span class=\"line\">periodico.subscribe(subscriptor2);</span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Nueva edicion\"</span>);</span><br><span class=\"line\">periodico.subscribe(subscriptor3); </span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Segunda edicion\"</span>); </span><br><span class=\"line\">periodico.unsubscribe(subscriptor1); </span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Tercera edicion\"</span>); </span><br><span class=\"line\">periodico.subscribe(subscriptor2);</span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Nueva edicion\"</span>);</span><br><span class=\"line\">periodico.subscribe(subscriptor3); </span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Segunda edicion\"</span>); </span><br><span class=\"line\">periodico.unsubscribe(subscriptor1); </span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Tercera edicion\"</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Y obtenemos la siguiente salida:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"--- Primera edición ---\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Subscriptor # 1 recibió una nueva edición: Nueva edicion\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Subscriptor # 2 recibió una nueva edición: Nueva edicion\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"--- Segunda edición ---\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Subscriptor # 1 recibió una nueva edición: Segunda edicion\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Subscriptor # 2 recibió una nueva edición: Segunda edicion\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Subscriptor # 3 recibió una nueva edición: Segunda edicion\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"--- Tercera edición ---\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Subscriptor # 2 recibió una nueva edición: Tercera edicion\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Subscriptor # 3 recibió una nueva edición: Tercera edicion\"</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>De esta manera queda totalmente completo el patrón observer. Como vez es muy fácil implementar el patrón observer y su utilidad es casi inmediata. A continuación podrás observar todo el código completo de este ejemplo:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Publicador</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() {</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscriptors = \\[\\];</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    subscribe(subscriptor) {</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscriptors.push(subscriptor);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  </span><br><span class=\"line\">    unsubscribe(subscriptor) {</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscriptors = <span class=\"keyword\">this</span>.subscriptors.filter( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== subscriptor );</span><br><span class=\"line\">    }</span><br><span class=\"line\">  </span><br><span class=\"line\">    notify(event) {</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subscriptors.forEach( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> {</span><br><span class=\"line\">        item.buzon.call(item, event);</span><br><span class=\"line\">      });</span><br><span class=\"line\">    }  </span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subscriptor</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(id) {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Se ha creado el subscriptor #: \"</span> + id);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  buzon(edicion) {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Subscriptor # \"</span> + <span class=\"keyword\">this</span>.id + <span class=\"string\">\" recibió una nueva edición: \"</span> + edicion);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> periodico = <span class=\"keyword\">new</span> Publicador();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscriptor1 = <span class=\"keyword\">new</span> Subscriptor(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> subscriptor2 = <span class=\"keyword\">new</span> Subscriptor(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> subscriptor3 = <span class=\"keyword\">new</span> Subscriptor(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"--- Primera edición ---\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">periodico.subscribe(subscriptor1);</span><br><span class=\"line\"></span><br><span class=\"line\">periodico.subscribe(subscriptor2);</span><br><span class=\"line\"></span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Nueva edicion\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"--- Segunda edición ---\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">periodico.subscribe(subscriptor3); </span><br><span class=\"line\"></span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Segunda edicion\"</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"--- Tercera edición ---\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">periodico.unsubscribe(subscriptor1); </span><br><span class=\"line\"></span><br><span class=\"line\">periodico.notify(<span class=\"string\">\"Tercera edicion\"</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza del patrón observer. déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>"},{"title":"Entendiendo el patrón iterador \"Iterator pattern\" en Javascript","path":"patron-iterador-iterator-pattern-en-javascript/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/patron-iterador-iterator-pattern-en-javascript/","content":"<!-- excerpt --></p>\n<p>El patrón iterador es uno de los patrones de diseño de software más usado en Javascript y también uno de los más sencillos. Es un patrón de comportamiento ya que define como se comunican objetos entre si. De él se extienden importantes aplicaciones que pueden ayudar a definir mejores arquitecturas en aplicaciones web, por lo que su uso y estudio es altamente recomendado. En este post aprenderemos como implementarlo en Javascript y en que situaciones lo podemos usar.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/02/3D9EF91B-93C7-4DB4-AC5D-73362F46D236.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/02/3D9EF91B-93C7-4DB4-AC5D-73362F46D236.png\" alt=\"\"></a></p>\n<p>Empecemos por definir este patrón. Básicamente todos hemos usado arrays de esta forma [1,2,3,4] y usualmente si queremos recorrerlo nos inclinamos rápidamente por usar una estructura cíclica como “for” o “while” sin embargo esto hace que el código sea un poco mas imperativa y menos declarativa haciendo que no tengamos tanto control con cada dato unitario dentro del arreglo. Desde este punto es donde empieza a cobrar fuerza este patron iterador ya que básicamente lo que nos provee es una manera de recorrer el arreglo de una manera declarativa. El principal principio de este patrón es permitirnos recorrer colecciones de objetos de una manera que podamos decidir cuando queremos el siguiente objeto y cuando no. Para ello obligatoriamente deben existir tres métodos dentro del iterador:</p>\n<ul>\n<li>first() –&gt; Retorna siempre el primer objeto de la colección.</li>\n<li>next() –&gt; Retorna el siguiente objeto de la colección si existe.</li>\n<li>current() –&gt; Retorna el objeto actual de la colección sobre el estamos parado.</li>\n</ul>\n<p>Empecemos entonces por definir una clase llamada iterator con estos tres métodos:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iterator</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(collection) {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collection = collection;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  first() {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.collection\\[<span class=\"number\">0</span>\\];</span><br><span class=\"line\">  }</span><br><span class=\"line\">  next() {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.index += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.collection\\[<span class=\"keyword\">this</span>.index\\];</span><br><span class=\"line\">  }</span><br><span class=\"line\">  current() {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.collection\\[<span class=\"keyword\">this</span>.index\\];</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como ves usando ES6 hemos definido una clase que permite hacer operaciones muy básicas sobre el array, pero siempre conservando cual es el índice sobre que esta la colección en todo momento. Esto nos permitirá fácilmente movernos sobre ella. Adicionalmente aunque no es obligatorio en la implementación de este patrón. Si es altamente recomendado añadir dos métodos utilitarios mas sobre la clase iterador. Estos son:</p>\n<ul>\n<li>hasNext() —&gt; Retorna true si hay mas items disponibles en la colección.</li>\n<li>reset() —&gt; Permite reiniciar el indice para iterar de nuevo sobre la colección.</li>\n</ul>\n<p>Veamos entonces como sería la implementación:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iterator</span> </span>{</span><br><span class=\"line\">  …</span><br><span class=\"line\">  reset() {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  hasNext() {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.collection.length &gt; <span class=\"keyword\">this</span>.index +<span class=\"number\">1</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  …</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Super simple!, una vez que tu clase esté definida puedes usar prácticamente cualquier tipo de array para construir tu iterador y operar sobre él. Veamos un ejemplo de su uso práctico usando un ciclo while:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Usando un ciclo while</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = \\[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>\\];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayIterator = <span class=\"keyword\">new</span> Iterator(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayIterator.first());</span><br><span class=\"line\"><span class=\"keyword\">while</span> (arrayIterator.hasNext()) {</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrayIterator.next());</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>De esta manera queda totalmente completo el patrón iterador. Como vez es muy fácil implementar el patrón iterador y su utilidad es casi inmediata. A continuación podrás observar todo el código completo de este ejemplo:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iterator</span> </span>{</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(collection) {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collection = collection;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  first() {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.collection\\[<span class=\"number\">0</span>\\];</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  next() {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.index += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.collection\\[<span class=\"keyword\">this</span>.index\\];</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  current() {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.collection\\[<span class=\"keyword\">this</span>.index\\];</span><br><span class=\"line\">  }</span><br><span class=\"line\">  </span><br><span class=\"line\">  reset() {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  hasNext() {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.index + <span class=\"number\">1</span> &lt; <span class=\"keyword\">this</span>.collection.length );</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = \\[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>\\];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayIterator = <span class=\"keyword\">new</span> Iterator(arr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayIterator.first());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (arrayIterator.hasNext()) {</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrayIterator.next());</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza del patrón iterator. déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>"},{"title":"Todo sobre Animaciones en CSS","path":"todo-sobre-animaciones-en-css/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/todo-sobre-animaciones-en-css/","content":"<!-- excerpt --></p>\n<p>Las animaciones en CSS son un conjunto de herramientas que nos permite mostrar contenido de una manera mas dinámica y llamativa para los usuarios de nuestro sitio web. Su principal ventaja versus las transiciones es que nos permite tener un más granular de los estados de la animación mediante los @keyframes. Veamos un ejemplo de una animación simple en la forma abreviada:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.animated-thing</span> {</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: black-to-white <span class=\"number\">1s</span> linear <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Ahora veamos la misma animación en la forma larga:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.animated-thing</span> {</span><br><span class=\"line\">  <span class=\"attribute\">animation-name</span>: black-to-white;</span><br><span class=\"line\">  <span class=\"attribute\">animation-duration</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-timing-function</span>: linear;</span><br><span class=\"line\">  <span class=\"attribute\">animation-iteration-count</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-delay</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>El nombre de la animación hace referencia al keyframe respectivo. Los @keyframes en CSS los podemos definir como los puntos de trayectoria de una animación, es decir nos permite definir que valores deben alcanzar las propiedades que estamos animando a lo largo de la secuencia de animación. Esto nos da un control más específico sobre los pasos intermedios de la secuencia de animación.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> black-to-white {</span><br><span class=\"line\">  0% {}</span><br><span class=\"line\">  25%, 35% { }</span><br><span class=\"line\">  100% {}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>También se pueden utilizar formas abreviadas:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> black-to-white { </span><br><span class=\"line\">  <span class=\"selector-tag\">from</span>{} </span><br><span class=\"line\">  <span class=\"selector-tag\">to</span>{}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>También puedes usar mas de un keyframe a la vez separando por comas las diferentes animaciones:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.animated-thing</span> {</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>:</span><br><span class=\"line\">    black-to-white <span class=\"number\">1s</span> linear <span class=\"number\">1</span>,</span><br><span class=\"line\">    black-to-red <span class=\"number\">2s</span> ease-out infinite <span class=\"number\">2s</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Una consideración a tener en cuentas es que los nombres de la animación no pueden empezar con números o caracteres especiales. Por ejemplo “1st-animation” no sería un nombre válido para la animación.</p>\n<h3 id=\"Animacion-de-Sprites-usando-CSS\"><a href=\"#Animacion-de-Sprites-usando-CSS\" class=\"headerlink\" title=\"Animación de Sprites usando CSS\"></a>Animación de Sprites usando CSS</h3><p>La animación de sprites es una de las técnicas mas avanzadas que se puede tener con CSS, primero es necesario entender que es un sprite: Un sprite es una imagen gráfica única que se incorpora a una escena más grande para que parezca ser parte de la escena.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/700A020D-5636-4097-898A-FD3B6C6EB0A5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/700A020D-5636-4097-898A-FD3B6C6EB0A5.png\" alt=\"\"></a></p>\n<p>Aquí se ve un ejemplo de una hoja de sprites del capitán america. Cada secuencia de movimiento ocupa el mismo espacio que las demás y poniéndolas juntas a determinada velocidad nos permite “percibir” que hay movimiento en el personaje.</p>\n<p>Bien para hacer una efectiva animación de un sprite en CSS no nos basta con las animation-timing-function: linear, ease-in, ease-out, ease-in-out o cubic-bezier; ya que en cualquier caso se vería el movimiento de los frames de un lado a otro. Allí es donde podemos usar la función steps(x) donde x es el número de sprites que tendría tu hoja de sprites. steps(x) divide un bloque de keyframes en pasos iguales x luego salta entre ellos. Veamos un ejemplo de como animar el capitán américa del sprite anterior:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.waking-front</span> {</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://untamed.wild-refuge.net/images/rpgxp/avengers/captainamerica_shield.png) <span class=\"number\">0</span> <span class=\"number\">0</span> no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: waking-front <span class=\"number\">1s</span> <span class=\"built_in\">steps</span>(4) infinite;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> waking-front {</span><br><span class=\"line\">  0% { </span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  }  </span><br><span class=\"line\">  100% { </span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: -<span class=\"number\">128px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como buena práctica se sugiere no poner el 0% si el estado inicial es el mismo de la imagen por lo que una versión reducida podría ser de esta manera:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> waking-front {</span><br><span class=\"line\">  100% { </span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: -<span class=\"number\">128px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Hay también tres propiedades importantes que deberías conocer cuando estas creando animaciones en CSS, estas propiedades van directamente dentro del @keyfram. Estas son:</p>\n<p>animation-fill-mode: forwards o backwards;  // Permite controlar cual es el estado final de la aplicación si quieres que al finalizar la aplicación se preserven los estilos con los que terminó la aplicación.</p>\n<p>animation-play-state: paused  o running; // Te permite controlar el estado de la animación, si esta corriendo o esta pausada.</p>\n<p>animation-direction: reverse o alternate o alternate-reverse; // Te permite controlar si la animación empieza o termina en el valor del 100%, si es una animación que esta ejecutando infinitamente puedes usar alternate para que se devuelva e inicie indefinidamente.</p>\n<p>Puedes controlar el estado de una animación con Javascript usando los siguientes listeners:</p>\n<ul>\n<li>animationstart</li>\n<li>animationend</li>\n<li>animationiteration</li>\n</ul>\n<p>En los siguientes ejemplos se muestran un conjunto de animaciones con sprites con distintas animaciones y propiedades, puedes jugar con ellas para evidenciar sus diferencias:</p>\n<ul>\n<li><a href=\"https://codepen.io/seagomezar/pen/RjzMvQ\" target=\"_blank\" rel=\"noopener\">https://codepen.io/seagomezar/pen/RjzMvQ</a> <a href=\"https://codepen.io/seagomezar/pen/KyOKKe\" target=\"_blank\" rel=\"noopener\">https://codepen.io/seagomezar/pen/KyOKKe</a> </li>\n<li><a href=\"https://codepen.io/seagomezar/pen/vWoBYM\" target=\"_blank\" rel=\"noopener\">https://codepen.io/seagomezar/pen/vWoBYM</a> <a href=\"https://codepen.io/seagomezar/pen/RjzXmO\" target=\"_blank\" rel=\"noopener\">https://codepen.io/seagomezar/pen/RjzXmO</a></li>\n</ul>\n<p>Personalmente sigo a Rachel Nabors (<a href=\"https://twitter.com/rachelnabors\" target=\"_blank\" rel=\"noopener\">@</a><a href=\"https://twitter.com/rachelnabors\" target=\"_blank\" rel=\"noopener\">rachelnabors</a>) una de mis grandes heroínas en animación <a href=\"http://rachelnabors.com/\" target=\"_blank\" rel=\"noopener\">http://rachelnabors.com/</a>.</p>\n<p>Finalmente algunas consideraciones sobre las animaciones:</p>\n<ul>\n<li>Las animaciones pueden hacer loop infinitamente.</li>\n<li>Poseen auto inicio, no se requiere un disparador como las transiciones.</li>\n<li>Se pueden repetir infinitamente.</li>\n<li>Se pueden alternar entre end y start.</li>\n<li>Se pueden agrupar distintas propiedades.</li>\n<li>Usa las animaciones para indicar que un elemento cambia de dirección, de estado de solidez y de momentum.</li>\n<li>“Animations in” o animaciones al comienzo son mas fáciles que las animaciones al final ( animation out). Por eso verás miles de sitios con un animaciones al comienzo que una vez que terminan difícilmente regresan de una buena manera al estado original.</li>\n<li>Existe tres tipos de animaciones:</li>\n<li><ul>\n<li>Supplemental Animations: Aquellas no están relacionadas con la información inicial.</li>\n<li>Decorative Animations: Solo aportan decoración y nunca deberías tener mas de una.</li>\n<li>Stateful Animations: El core de tu animación y animaciones sobre contenido importante o call to action, resalta detalles que el usuario no debería pasar por alto.</li>\n</ul>\n</li>\n<li>Puedes usar la propiedad translateZ(0) que hará que tu animación sea ejecutada por el hardware en vez de tu sitio navegador, usa esto si estas teniendo problemas de performance con las animaciones o si simplemente quieres optimizar tu flujo.</li>\n</ul>\n<p>Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza de las animaciones en CSS. Déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>"},{"title":"Todo sobre transiciones en CSS","path":"todo-sobre-transiciones-en-css/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/todo-sobre-transiciones-en-css/","content":"<p>Las transiciones hacen parte del conjunto de herramientas que poseemos como desarrolladores FrontEnd para mejorar la experiencia del usuario dentro de nuestra aplicación Web. Son útiles porque nos permiten animar el cambio de valores en las distintas propiedades de un elemento lo que puede hacerlo más llamativo al usuario e invitarlo a interactuar con él. En este post trataré de cubrir el extenso tema de transiciones con diversos ejemplos adaptados desde la especificación.</p>\n<a id=\"more\"></a>\n<p>Empecemos con un ejemplo simple:</p>\n<p>Tenemos un cuadrado simple:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"square1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"square red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Y unos estilos asociados a dicho cuadrado:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"></ul></figcaption><div class=\"tabs-content\"></div></figure>\n<p>Y tenemos una clase adicional que se la asignaremos al cuadrado en un momento x en el tiempo:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.black</span> {</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Sin embargo queremos que esto se haga de una manera suave, controlada y agradable al usuario. Por tanto es aquí donde necesitamos hacer uso de las transiciones. Esto lo podemos hacer añadiendo la propiedad transition dentro de la clase que queremos añadir:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.black</span> {</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: background <span class=\"number\">2s</span> <span class=\"number\">0.25s</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>La propiedad transition como la hemos usado en el ejemplo anterior nos permite que el cambio de background de rojo a negro se haga durante 2 segundos (duración) en vez de hacer el cambio instantáneamente, también nos permite indicar que este cambio empiece a ocurrir 0.25 segundos después de que asigne la clase al elemento (delay).<br>También existe otra sintaxis alternativa para esto que requiere unas cuantas líneas más, sin embargo es útil conocerla:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.black</span> {</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">transition-property</span>: background;</span><br><span class=\"line\">  <span class=\"attribute\">transition-duration</span>: <span class=\"number\">2s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition-delay</span>: <span class=\"number\">0.25s</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Analogamente a los valores que hemos asignado en segundo a la duración y al retraso (delay) podríamos haberlo hecho en milisegundos, para lo cual bastaría con multiplicar por 1000 y añadir ms al final. Por ejemplo:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"selector-tag\">transition-duration</span>: 2000<span class=\"selector-tag\">ms</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">transition-delay</span>: 250<span class=\"selector-tag\">ms</span>;</span><br><span class=\"line\">...</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Si queremos hacer transiciones sobre más de una propiedad, podemos usar all para indicar que la transición se aplica sobre todas las propiedades posibles:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.black</span> {</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">2s</span> <span class=\"number\">0.25s</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p><strong>Nota</strong>: Transition all no es recomendable desde el punto de vista de desempeño (performance) altamente recomendamos no usar transition all a menos que definitivamente quieras aplicar transiciones sobre todo lo que pase con el elemento de la misma manera, por eso a continuación te explico como hacer transiciones específicamente con cada propiedad.</p>\n<p>A veces no deseamos que se hagan transiciones sobre todas las propiedades de la misma manera, la propiedad transition además tiene la característica de permitir especificar la transición de cada propiedad simplemente separándolas por coma. Veamos un ejemplo:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.black</span> {</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: background <span class=\"number\">2s</span> <span class=\"number\">0.25s</span>,</span><br><span class=\"line\">                  color <span class=\"number\">1.5</span> <span class=\"number\">3s</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>En el ejemplo anterior estamos cambiando el background y el color con distinta duración y distinto retraso (delay). Esto permite tener un control mas granular de exactamente lo que necesitamos animar en cada transición.</p>\n<p>Como habrás notado hasta ahora las transiciones de las que hablamos ocurren de manera lineal, esto quiere decir que el cambio ocurre uniformemente durante el tiempo que dure la transición, sin embargo esta no es la única manera de hacerlo, por ejemplo podemos acelerar el cambio al comienzo y desacelerarlo al final lo que nos dará un tipo diferente de sensación al ver la transición. Para determinar como ocurrirá el cambio, tenemos la propiedad transition-timing-function que puede tomar los siguientes valores:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-timing-function: linear; // Este es el valor por defecto, no hace falta incluirlo</span><br><span class=\"line\">transition-timing-function: ease-in; // Significa que al comienzo sea rápido el cambio y que después se ralentice.</span><br><span class=\"line\">transition-timing-function: ease-out; // Significa que al comienzo sea lento el cambio y que después se acelere.</span><br><span class=\"line\">transition-timing-function: ease-in-out; // Significa que al comienzo y al final sea rápido el cambio pero en la mitad sea lento</span><br><span class=\"line\">transition-timing-function: cubic-bezier(0.21,0.3,0.1,0.23); // De acuerdo a los valores se acelera o desacelera en los distintos momentos en que ocurre la transición.</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Pero esta no es la única manera de añadir esta propiedad a las transiciones. También es posible hacerlo directamente en la propiedad transition:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">css</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight css\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.move</span> {</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(500px);</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">2s</span> <span class=\"number\">0.25s</span> ease-in-out;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Incluso en cada transición sobre las propiedades:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"></ul></figcaption><div class=\"tabs-content\"></div></figure>\n<p>Miremos en detalle un poco más como funciona la propiedad transition-timing-function cuando toma el valor de cubic-bezier(). Para ello revisemos en que consiste la ecuación de la curva de bezier en la cual se basa esta función.</p>\n<p>Las curvas de bezier son un sistema matemático que desarrollo pierre bezier para el trazado de dibujos de aeronaves y automóviles que se describe como una ecuación que toma cuatro valores para describir la curva:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/23242B8E-A920-4955-84E1-C7D2563CD969.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/23242B8E-A920-4955-84E1-C7D2563CD969.png\" alt=\"\"></a> Con una ecuación matemática de la siguiente forma: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/Screen-Shot-2018-01-09-at-4.13.37-PM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/Screen-Shot-2018-01-09-at-4.13.37-PM-1024x53.png\" alt=\"\"></a></p>\n<p>Pues bien estos cuatro valores (P0 a P3) son los que describen la transición del movimiento entre el punto inicial y el punto final y con estos se pueden definir completamente diversos tipos de transiciones:</p>\n<p>cubic-bezier(P0, P1, P2, P3); En estos sitios web puedes jugar más con este tipo de transiciones donde puedes ajustar los valores para tener un mayor control en tu transición:</p>\n<ul>\n<li><a href=\"http://cubic-bezier.com/\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com/</a></li>\n<li><a href=\"http://easings.net/\" target=\"_blank\" rel=\"noopener\">http://easings.net/</a></li>\n</ul>\n<p>Debes tener en cuenta que hay propiedades que no son “transicionables” esto quiere decir que no puedes aplicar transiciones a estas propiedades. Para ver una lista de cuales propiedades son “transicionables” y cuales no puedes revisar este link:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties</a></p>\n<p>En el siguiente ejemplo se muestra un conjunto de transiciones sobre cubos con distintas transition-timing-function y propiedades, puedes jugar con ellas para evidenciar sus diferencias:</p>\n<p><a href=\"https://codepen.io/seagomezar/pen/wPbYqe\" target=\"_blank\" rel=\"noopener\">https://codepen.io/seagomezar/pen/wPbYqe</a></p>\n<p>Las herramientas para desarrolladores de los navegadores como chrome y firefox nos permiten ralentizar o acelerar las transformaciones para un mejor proceso de debug en ellas, para ello puedes abrir la pestaña animaciones:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/13B715EC-945A-47A7-A6E8-F6A79F24AE3D.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/13B715EC-945A-47A7-A6E8-F6A79F24AE3D-1024x642.png\" alt=\"\"></a></p>\n<p>Puedes también usar Javascript para conocer el estado de una transición mediante los siguientes listeners:</p>\n<ul>\n<li>transitionstart</li>\n<li>transitionend</li>\n</ul>\n<p>Finalmente algunas consideraciones respecto a las transiciones:</p>\n<ul>\n<li>Transiciones alrededor de 100ms son instantáneas para los usuarios y difícilmente perceptibles.</li>\n<li>Transiciones de máximo 1 segundo y mínimo 250ms son buenas y mantiene a los usuario conectados.</li>\n<li>Mas de 2 segundos es definitivamente una mala idea para transformaciones en sitios web estándar ya que puede desconectar al usuario de lo que pasa.</li>\n<li>De 250ms a 300ms es el tiempo estándar de la mayoría de animaciones.</li>\n<li>Las transiciones en general te permite crear experiencias que pasan solo una vez.</li>\n<li>Si el navegador no soporta transiciones en el peor de los casos siempre se cambia la propiedad.</li>\n<li>Las transiciones son granulares porque te permiten animar una o dos o x propiedades.</li>\n</ul>\n<p>Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza de las transiciones en CSS. Déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>\n"},{"title":"Implementando Google Cloud Vision en NodeJS","path":"implementando-google-cloud-vision-en-nodejs/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/implementando-google-cloud-vision-en-nodejs/","content":"<!-- excerpt --><br>Lo primero que necesitamos entender es que la SDK de la Vision Cloud de Google debería operar sobre un servidor, es allí donde surge la necesidad de usar NodeJS sin embargo si tienes alguna experiencia con NodeJS sabrás que en la mayoría de los casos se requiere de una librería para procesar las peticiones HTTP Post, Get y Put. En este post usaremos ExpressJS ya que es la librería mas conocida para esta tarea. Si tienes dudas sobre las generalidades de la Cloud Vision de Google o la capa gratuita en este <a href=\"https://www.sebastian-gomez.com/desarrollo-web/introduccion-a-google-vision-api/\" target=\"_blank\" rel=\"noopener\">post </a>puedes revisarlas.</p>\n<p>En primer lugar vamos a revisar las característica que nos ofrece la API de visión de Google para implementar con NodeJs:</p>\n<ul>\n<li>Detección de rostros</li>\n<li>Atributos de las imágenes.</li>\n<li>Anotación de etiquetas.</li>\n<li>Detección de contenido para adultos.</li>\n<li>Detección de logos.</li>\n<li>Encuadre de los elementos de la imagen.</li>\n<li>Reconocimiento óptico de caracteres.</li>\n</ul>\n<p>La arquitectura propuesta para realizar la implementación de Cloud Visión de Google es esta:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/560CD915-5BD9-4DD9-A6BD-2C81C69DF003.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/560CD915-5BD9-4DD9-A6BD-2C81C69DF003-1024x508.png\" alt=\"\"></a></p>\n<p>Revisemos las responsabilidades que tendría cada uno de los componentes de la arquitectura anterior:</p>\n<p>Client Browser:</p>\n<ul>\n<li>Presentar información.</li>\n<li>Tomar fotografías o videos.</li>\n<li>Preprocesar imágenes.</li>\n<li>Enviar las imágenes al servidor.</li>\n</ul>\n<p>ExpressJS:</p>\n<ul>\n<li>Filtrar las peticiones del cliente.</li>\n<li>Recibir las imágenes y almacenarlas en el servidor.</li>\n<li>Enviar las respuestas al cliente.</li>\n</ul>\n<p>Google Vision SDK *:</p>\n<ul>\n<li>Procesar las imágenes.</li>\n<li>Operaciones matemáticas.<ul>\n<li>Detección de píxeles.</li>\n<li>Filtros.</li>\n<li>Transformaciones.</li>\n</ul>\n</li>\n<li>Codificación de las imágenes.</li>\n<li>Preparación de las peticiones.</li>\n</ul>\n<p>Google Vision API:</p>\n<ul>\n<li>Comparar las imágenes contra el conjunto de imágenes.</li>\n<li>Aplicar rutinas de machine learning con las imágenes como entrada.</li>\n<li>Conectarse con otras tecnologías como Tensor Flow.</li>\n<li>Analizar los resultados y aumentar la base de conocimiento.</li>\n</ul>\n<p>(*) Un SDK (Software Development Kit), o kit de desarrollo de software, es un conjunto de herramientas que ayudan a la programación de aplicaciones para un entorno tecnológico particular.</p>\n<p>Antes de empezar necesitamos obtener una clave y las credenciales del proyecto para hacer uso de la API y la SDK, esto lo podemos conseguir directamente en la consola: <a href=\"https://cloud.google.com/\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/</a>siguiendo estos simples pasos.</p>\n<ul>\n<li>Crear el proyecto: <a href=\"https://console.cloud.google.com/projectcreate\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com/projectcreate</a></li>\n<li>Acceder al proyecto.</li>\n<li>Seleccionar cuentas de servicio.</li>\n<li>Crear una cuenta de servicio → completar la información.</li>\n<li>Seleccionamos suministrar una nueva clave privada en formato JSON.</li>\n<li>Guardamos el archivo JSON que se genera.</li>\n</ul>\n<p>Manos a la obra con la implementación: en primer lugar creemos un proyecto en Node desde cero usando la línea de comandos.</p>\n<ul>\n<li>Crear un directorio: mkdir mi-directorio</li>\n<li>Inicializar git: git init</li>\n<li>Inicializar node: npm init</li>\n<li>Instalar las dependencias:<ul>\n<li>npm install @google-cloud/vision –save</li>\n<li>npm install express –save</li>\n<li>npm install multer –save</li>\n</ul>\n</li>\n<li>Configurar nuestro comando npm start en el package.json para que inicie nuestro server:</li>\n</ul>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span>: {</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>:<span class=\"string\">\"echo\\\\\"</span><span class=\"built_in\">Error</span>: no test specified\\\\<span class=\"string\">\"&amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>:<span class=\"string\">\"node server.js\"</span></span><br><span class=\"line\">},</span><br><span class=\"line\">...</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Esto nos creará la estructura base del proyecto y deberás añadir ademas algunos archivos. A continuación te muestro exactamente como debería lucir tu carpeta del proyecto y la explicación de cada item:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/71465872-9C25-4862-9540-4661925AA96E.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/71465872-9C25-4862-9540-4661925AA96E-1024x485.png\" alt=\"\"></a></p>\n<p>Como notarás los únicos archivos sobre los cuales escribiremos código son server.js, index.html y app.js. Empecemos entonces con una funcionalidad básica: ¿Como tomar fotos con javascript?</p>\n<p><a href=\"https://codepen.io/seagomezar/pen/QayorL\" target=\"_blank\" rel=\"noopener\">https://codepen.io/seagomezar/pen/QayorL</a></p>\n<p>Como verás simplemente creando un stream y accediendo a los elementos del DOM es posible obtener la mas sencilla funcionalidad de tomar desde la cámara de tu ordenador las imágenes y pintarlas dentro de la etiqueta img.</p>\n<p>Ahora veremos como subir la imagen que tomamos a nuestro servidor: En primer lugar desde nuestra aplicación una vez que tomamos la imagen y la pintamos dentro de la etiqueta SRC necesitamos hacer una petición HTTP al servidor indicándole que allí va la imagen. Para esto abre tu archivo app.js y añade la función upload:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">const</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">\"upload\"</span>;</span><br><span class=\"line\">    snap().then(<span class=\"function\">(<span class=\"params\">blob</span>) =&gt;</span> {</span><br><span class=\"line\">        http.open(<span class=\"string\">\"POST\"</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        http.setRequestHeader(<span class=\"string\">'X-Requested-With'</span>, <span class=\"string\">'XMLHttpRequest'</span>);</span><br><span class=\"line\">        http.onreadystatechange = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> {</span><br><span class=\"line\">            <span class=\"comment\">//Call a function when the state changes.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (http.readyState == <span class=\"number\">4</span> &amp;&amp; http.status == <span class=\"number\">200</span>) {</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(http.response);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">        formData.append(<span class=\"string\">\"uploads\"</span>, blob);</span><br><span class=\"line\">        http.send(formData);</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como verás en esta función invocamos a la función snap() que definimos para capturar imágenes desde nuestra cámara en el browser para enviar el contenido de la imagen mediante una XMLHttpRequest.  Luego necesitamos crear nuestro servidor para que sea capaz de recibir y procesar dicha imagen, es en este punto entonces donde necesitamos crear y configurar un servidor básico con express que soporte la opción de subir la imagen. Por tanto tu archivo server.js debe lucir de ésta manera:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">/* serves main page */</span></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>{</span><br><span class=\"line\">    res.sendfile(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">/* serves all the static files */</span></span><br><span class=\"line\">app.get(<span class=\"regexp\">/^(.+)$/</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>{</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'static file request : '</span> + req.params);</span><br><span class=\"line\">    res.sendfile(__dirname + req.params\\[<span class=\"number\">0</span>\\]);</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT || <span class=\"number\">5000</span>;</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Listening on \"</span> + port);</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// Setting up multer to upload images</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> multer = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> storage = multer.diskStorage({</span><br><span class=\"line\">    destination: <span class=\"function\">(<span class=\"params\">req, file, cb</span>) =&gt;</span> {</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"string\">'uploads/'</span>)</span><br><span class=\"line\">    },</span><br><span class=\"line\">    filename: <span class=\"function\">(<span class=\"params\">req, file, cb</span>) =&gt;</span> {</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">Date</span>.now() + <span class=\"string\">'.jpg'</span>)<span class=\"comment\">//Appending.jpg</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"keyword\">const</span> upload = multer({ <span class=\"attr\">storage</span>: storage });</span><br><span class=\"line\">app.post(<span class=\"string\">\"/upload\"</span>, upload.single(<span class=\"string\">'uploads'</span>), (req, res) =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentFile = req.file.path;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Image path: \"</span> + req.file.path);</span><br><span class=\"line\">    res.send(<span class=\"string\">\"Ok\"</span>);</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>En la primera parte de este archivo verás la funcionalidad básica que tiene un servidor de NodeJs usando express y sus respectivas configuraciones, sin profundizar mucho en esto nuestra función de interés es la función upload la cual procesará la imagen y la guardará en la carpeta uploads. Verás que  esta función también pondrá cada imagen en la carpeta de uploads con un numero consecutivo relacionado con el momento actual, esto lo hacemos para evitar duplicidades en las imágenes.</p>\n<p>Hasta este momento solo hemos creado funciones utilitarias en el server.js para inicializar el server y para subir archivos. Pero no hemos realizado ningún proceso sobre la imagen, ahora vamos a aprender como detectar características sobre la imagen usando la SDK de Cloud Vision API:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vision = <span class=\"built_in\">require</span>(<span class=\"string\">'@google-cloud/vision'</span>)({</span><br><span class=\"line\">    projectId: <span class=\"string\">'vision-poc-180601'</span>,</span><br><span class=\"line\">    keyFilename: <span class=\"string\">'./cloud-credentials.json'</span></span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">\"/labels\"</span>, upload.single(<span class=\"string\">'uploads'</span>), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentFile = req.file.path;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> request = {</span><br><span class=\"line\">        source: {</span><br><span class=\"line\">            filename: currentFile</span><br><span class=\"line\">        }</span><br><span class=\"line\">    };</span><br><span class=\"line\">    vision.labelDetection(request)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">results</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> labels = results\\[<span class=\"number\">0</span>\\].labelAnnotations;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Labels:'</span>);</span><br><span class=\"line\">        labels.forEach(<span class=\"function\">(<span class=\"params\">label</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(label.description));</span><br><span class=\"line\">            res.send(labels);</span><br><span class=\"line\">        })</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">'ERROR:'</span>, err);</span><br><span class=\"line\">        res.send(<span class=\"string\">\"BAD\"</span>);</span><br><span class=\"line\">    });</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Primero vamos a añadir las líneas que inicializan nuestra configuración de la Cloud Vision de Google. Luego creamos con express un endpoint que se encarga de recibir una imagen y obtener todos los labels o etiquetas que se pueden obtener de dicha imagen. Y los retornaremos como respuesta de la petición para presentarlos en el front-end.</p>\n<p>Finalmente podemos usar otra característica que nos permite hallar los rostros en una imagen con su respectiva traza y path de cada característica del rostro:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">\"/faces\"</span>, upload.single(<span class=\"string\">'uploads'</span>), (req, res) =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentFile = req.file.path;</span><br><span class=\"line\">    vision.faceDetection({ <span class=\"attr\">source</span>: { <span class=\"attr\">filename</span>: currentFile } })</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">results</span>) =&gt;</span> {</span><br><span class=\"line\">            <span class=\"keyword\">const</span> faces = results\\[<span class=\"number\">0</span>\\].faceAnnotations;</span><br><span class=\"line\">            res.send(faces);</span><br><span class=\"line\">        })</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">'ERROR:'</span>, err);</span><br><span class=\"line\">            res.send(<span class=\"string\">\"BAD\"</span>);</span><br><span class=\"line\">        });</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Una vez que tenemos nuestro archivo de servidor server.js completo, debemos modificar un poco nuestro index.html y app.js para mostrar nuestros hallazgos:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!—index.html—</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shutter\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"upload()\"</span>&gt;</span></span><br><span class=\"line\">    Tomar y subir una foto</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shutter\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"sendToLabelDetection()\"</span>&gt;</span></span><br><span class=\"line\">    Analizar imagen</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"shutter\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"sendToFaceDetection()\"</span>&gt;</span></span><br><span class=\"line\">    Detectar rostros y características</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Características de la imagen<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"labels\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Poniendo todo lo anterior junto podrás ver las características(labels) de la imagen en una manera similar a esta en la detección de características:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/589231F9-3898-4D24-982A-9C14165372AF.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/589231F9-3898-4D24-982A-9C14165372AF.png\" alt=\"\"></a></p>\n<p>Sin embargo para la detección y extracción de rostros he implementado solo el login por consola donde podrás ver un elemento de un array por rostro detectado y dentro de cada rostro detectado las “landmarks” que delimitan exactamente cada uno de los elementos del rostro:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/08180391-A2C7-4B81-9598-EC743DF0E449.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/08180391-A2C7-4B81-9598-EC743DF0E449-1024x424.png\" alt=\"\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/F4C92A6E-35F4-4F07-90A5-3EE820D2160A.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2017/12/F4C92A6E-35F4-4F07-90A5-3EE820D2160A-1024x291.png\" alt=\"\"></a></p>\n<p>Puedes jugar con estas funciones para crear combinaciones de características únicas para tu aplicación o producto. En este repositorio podrás jugar con este código  y usarlo para la implementación de tus propias funcionalidades, también encontrarás algunas otras funciones como por ejemplo detectar personas felices, o tristes e una foto:</p>\n<p><a href=\"https://github.com/seagomezar/devfest-vision\" target=\"_blank\" rel=\"noopener\">https://github.com/seagomezar/devfest-vision</a></p>\n<p>Para consultar más información sobre las operaciones de la SDK y la API de cloud vision para NodeJS puedes ver el siguiente repositorio:</p>\n<p><a href=\"https://github.com/googleapis/nodejs-vision/tree/master/samples\" target=\"_blank\" rel=\"noopener\">https://github.com/googleapis/nodejs-vision/tree/master/samples</a></p>\n<p>Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente, déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>"},{"title":"Introducción a Google Vision API","path":"introduccion-a-google-vision-api/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/introduccion-a-google-vision-api/","content":"<p>Siempre me ha fascinado la inteligencia artificial. De hecho en el pasado he dictado algunos cursos en algunas universidades en Medellín sobre inteligencia artificial y la temática es tan larga y extensa que a veces los primeros acercamientos de una persona a este tema resultan escabrosas y es probable que se rindan antes de tratar de hacer algo tangible usando inteligencia artificial. Por esto he querido crear esta historia ademas porque servirá de memoria para una presentación que haré en el Google DevFest de Medellín.</p>\n<a id=\"more\"></a>\n<p>Empecemos por lo básico, quiero mostrarles una de las APIs de la toda la suite de servicios en la nube que posee Google en su producto Google Cloud Platform, Google Vision API como su nombre lo indica es una API Rest que te permite hacer un análisis detallado y un procesamiento profundo de imágenes. Si bien esta disponible para casi todos los lenguajes modernos de programación me ha parecido interesante entender como podemos poner a funcionar esta API con Javascript y afortunadamente poseen una librería/SDK que funciona perfectamente con NodeJS.</p>\n<p>¿Como funciona Google Vision API?, pues bien, básicamente Google tiene indexada una gran colección de imágenes que ha venido creciendo a lo largo de su historia. Estas imágenes son el insumo básico para un proceso riguroso de clasificación que se ha venido mejorando cada día en Google, esto permite entonces que una vez que una imagen necesita ser analizada esta API tratará de encontrar imágenes similares y obtener los metadatos de estas imágenes similares. Por ejemplo si subes una imagen de tu perro o tu gato primero la API tratará de encontrar fotos similares y encontrará por supuesto algunas fotos con perros, luego de ese conjunto de fotos con perros tratará de encontrar algunas fotos con el mismo color, tamaño de las formas entre otras posibles características. Finalmente extraerá las etiquetas de esas imágenes similares y te las presentará como si fueran las de tu imagen. Bien, probablemente a este punto dirás “Por supuesto, esto no es Inteligencia Artificial” y tal vez estés en lo correcto.</p>\n<p>Si bien el proceso de clasificación no es un proceso “inteligente”, estrictamente hablando si es un insumo necesario para el aprendizaje de máquina (Machine Learning). También es el insumo para extraer patrones sobre las imágenes y poderlos comparar para generar conocimiento he incluso para generar conocimiento sobre lo aprendido (Deep Machine Learning), todos estos procesos hacen parte de la Google Vision API con agravante adicional, la potencia de computo de los servidores de Google (tal vez los más poderosos del mundo) han venido trabajando desde hace algún tiempo detectando patrones sobre las imágenes, procesando millones de imágenes cada día y aprendiendo de lo que nosotros como humanos creemos que hay en una imagen.</p>\n<p>Finalmente, te estarás preguntando… bueno si … se ve bien pero debe costar un ojo de la cara, la respuesta es no, afortunadamente para nosotros los desarrolladores, Google Vision API tiene una capa gratuita de hasta 1000 peticiones por mes, y luego $1.50 dólares aproximadamente por cada bloque de 1000 peticiones. Aquí puedes consultar más sobre los precios. Así que no hay porque al menos no probar esta API.</p>\n<p>De igual manera debes saber que no es la única API de visión artificial y procesamiento de imágenes que podrás encontrar, de hecho hay alternativas interesantes como Microsoft Azure y OCR.Space que podrás comparar y usar. Estas alternativas son incluso más baratas pero dependerá de tus necesidades específicas cual y cuando usar cada una de ellas. Aquí te dejo una comparación de precios.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*oVPEOdCfb3Dq6d4FXHrPCw.png\" alt=\"\"> Comparación de precios Google Cloud, MS Azure y OCR, tomado de: <a href=\"https://ocr.space/compare-ocr-software\" target=\"_blank\" rel=\"noopener\">https://ocr.space/compare-ocr-software</a>. Eso es todo por esta historia, en el siguiente Post voy a tratar de explicar cómo conectar y usar esta API con NodeJs.</p>\n"},{"title":"Datos en tiempo real con Firebase en Android","path":"datos-en-tiempo-real-con-firebase-en-android/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/datos-en-tiempo-real-con-firebase-en-android/","content":"<p>Cuando creamos una aplicación con Android Studio usando Firebase, es importante identificar las opciones que firebase y su librería para Android nos ofrece, esto nos ayudará a sacar el mayor provecho de firebase, en este post voy a mostrarte en detalle como funciona el concepto de “Data Syncronization”.</p>\n<a id=\"more\"></a>\n<p> Si no sabes como utilizar o como dar los primeros pasos con Firebase y Android Studio, te recomiendo que mires este post primero: <a href=\"http://www.sebastian-gomez.com/firebase/introduccion-a-firebase-para-android/\" target=\"_blank\" rel=\"noopener\">Introducción a Firebase para Android</a>, allí te enseño como configurar el contexto y todo lo que requieres para empezar correctamente con Firebase en Android Studio. Acceder a los datos de Firebase desde nuestra aplicación es muy simple, simplemente se require declarar una variable de tipo Firebase.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">java</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight java\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Firebase mRef;</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Esta variable debe ser inicializada con un objeto de tipo Firebase, cuyo constructor recibe la URL de tu endpoint en firebase.google.com, es decir:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">java</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight java\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mRootRef = <span class=\"keyword\">new</span> Firebase(<span class=\"string\">\"https://miendpointenfirebase.firebaseio.com\"</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Con esto tenemos enlazada nuestra aplicación con el Endpoint de Firebase. Supongamos que adentro de nuestro enpoint tenemos un objeto llamado mensaje, y queremos mostrar el contenido de dicho objeto en nuestra aplicación (Mira de que te hablo: ) <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-18-at-4.13.57-PM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-18-at-4.13.57-PM-300x99.png\" alt=\"Screen Shot 2016-05-18 at 4.13.57 PM\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-18-at-3.45.55-PM.png\" target=\"_blank\" rel=\"noopener\"></a> Para mostrar este mensaje en un TextView, podriamos hacer lo siguiente:</p>\n<ol>\n<li>Obtenemos la referencia al TextView (Recuerda que esto debe estar en la definición de la clase)</li>\n</ol>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">java</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight java\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mTextView = (TextView)findViewById(R.id.textView);</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<ol start=\"2\">\n<li>Obtenemos la referencia al objeto mensaje de nuestro Endpoint, (Esto debe estar en onStart() )</li>\n</ol>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">java</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight java\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Firebase messagesRef = mRootRef.child(<span class=\"string\">\"messages\"</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<ol start=\"3\">\n<li>Le añadimos un listener que nos permita conocer cuando cambia este mensaje:</li>\n</ol>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">java</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight java\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">messagesRef.addValueEventListener(<span class=\"keyword\">new</span> ValueEventListener() {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDataChange</span><span class=\"params\">(DataSnapshot dataSnapshot)</span> </span>{</span><br><span class=\"line\">        <span class=\"comment\">//Cada vez que el mensaje cambie, se va a llamar este bloque de codigo</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancelled</span><span class=\"params\">(FirebaseError firebaseError)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<ol start=\"4\">\n<li>Asignamos el mensaje a nuestro TextView, para eso es necesario añadir exactamente que tipo de dato vamos a recibir, por eso es necesario dentro de la función getValue añadir el String.class:</li>\n</ol>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">java</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight java\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">messagesRef.addValueEventListener(<span class=\"keyword\">new</span> ValueEventListener() {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDataChange</span><span class=\"params\">(DataSnapshot dataSnapshot)</span> </span>{</span><br><span class=\"line\">        <span class=\"comment\">//Cada vez que el mensaje cambie, se va a llamar este bloque de codigo</span></span><br><span class=\"line\">        String mensaje = dataSnapshot.getValue(String.class);</span><br><span class=\"line\">        mTextView.setText(mensaje);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancelled</span><span class=\"params\">(FirebaseError firebaseError)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>De esta manera cada vez que cambia el valor del “mensaje” cambiará automáticamente y en tiempo real en nuestra aplicación.<br><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-18-at-4.14.50-PM-300x75.png\" alt=\"Screen Shot 2016-05-18 at 4.14.50 PM\"><br><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-18-at-4.11.25-PM-175x300.png\" alt=\"Screen Shot 2016-05-18 at 4.11.25 PM\">               </p>\n<p>A estas alturas te estarás preguntando para que sirve entonces el método onCancelled, simplemente dicho método se ejecutará si ocurre algún problema tratando de acceder al objeto en nuestro Endpoint. </p>\n<p>Eso es todo, espero que este post te sea de utilidad, Si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>\n"},{"title":"Introducción a Firebase para Android","path":"introduccion-a-firebase-para-android/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/introduccion-a-firebase-para-android/","content":"<p>Firebase es lo que se conoce como “Backend como Servicio”, que básicamente provee de una API para guardar y sincronizar datos en la nube en tiempo real, ya sea desde un sitio web, una aplicación móvil híbrida o una aplicación móvil nativa.<br>En este post veremos como crear una aplicación móvil con Android y Firebase.<br><a id=\"more\"></a></p>\n<p>Entre todas las características que ofrece Firebase, las principales son:</p>\n<ul>\n<li>Muy fácil implementación.</li>\n<li>Sincronización instantánea.</li>\n<li>Integración con Servicios de Autenticación.</li>\n</ul>\n<p>Firebase se convierte en una opción importante a considerar cuando queremos crear un prototipo muy rápido y no tenemos el tiempo o los conocimientos para desarrollar un backend o una API propia con alguno de los lenguajes tradicionales como PHP, Python, RoR, “Node.Js” (no tan tradicional).</p>\n<p>No voy a explicarte como abrir una cuenta en Firebase, ni como Usarlo, ya que esto lo explico en este post, para este post partiremos que tu ya tienes una cuenta creada en Firebase y un Endpoint ( <a href=\"https://miendpointenfirebase.firebaseio.com/\" target=\"_blank\" rel=\"noopener\">https://miendpointenfirebase.firebaseio.com/</a>). También debes tener instalado Android Studio.</p>\n<p>Manos a la obra lo primero que haremos será crear un nuevo proyecto en Android Studio y una Actividad en Blanco:<a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.46.48-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.46.48-AM-276x300.png\" alt=\"Screen Shot 2016-05-02 at 10.46.48 AM\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.47.32-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.47.32-AM-1024x557.png\" alt=\"Screen Shot 2016-05-02 at 10.47.32 AM\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.47.49-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.47.49-AM-300x288.png\" alt=\"Screen Shot 2016-05-02 at 10.47.49 AM\"></a> En nuestro Caso vamos a crear una Aplicación en tiempo real que permita visualizar cual es tu estado de ánimo, así que la llamaré EstadoDeAnimo.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.50.04-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.50.04-AM-1024x769.png\" alt=\"Screen Shot 2016-05-02 at 10.50.04 AM\"></a></p>\n<p>Ahora vamos a activar Firebase en nuestra aplicación, para ello vamos a File&gt;Project Structure&gt;Cloud y activamos la casilla de Firebase y hacemos click en Ok, (Si así de fácil) al haber hecho esto ya queda activado Firebase en nuestro proyecto.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.52.33-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.52.33-AM-281x300.png\" alt=\"Screen Shot 2016-05-02 at 10.52.33 AM\"></a></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.53.00-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.53.00-AM-300x249.png\" alt=\"Screen Shot 2016-05-02 at 10.53.00 AM\"></a></p>\n<p>Para comprobar que efectivamente todo ha salido bien hasta aquí vamos chequear un poco nuestro archivo build.gradle (Vamos a chequear el que corresponde a App).</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.56.31-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-10.56.31-AM-300x154.png\" alt=\"Screen Shot 2016-05-02 at 10.56.31 AM\"></a></p>\n<p>Notarás que se han añadido algunas dependencias de Firebase. Sin embargo falta algo mas que debemos añadir antes de las dependencias algunas líneas relacionadas con la licencia de Firebase para evitar errores de compilación y licencias duplicadas, (Esperamos que para las próximas versiones no sea necesario). Las líneas que añadiremos serán estas:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">java</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight java\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packagingOptions {</span><br><span class=\"line\">&nbsp; &nbsp; exclude&nbsp;<span class=\"string\">'META-INF/LICENSE'</span></span><br><span class=\"line\">&nbsp; &nbsp; exclude&nbsp;<span class=\"string\">'META-INF/LICENSE-FIREBASE.txt'</span></span><br><span class=\"line\">&nbsp; &nbsp; exclude&nbsp;<span class=\"string\">'META-INF/NOTICE'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Dejando a nuestro archivo build.gradle de esta manera:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.03.56-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.03.56-AM-300x213.png\" alt=\"Screen Shot 2016-05-02 at 11.03.56 AM\"></a></p>\n<p>Así finaliza la instalación de Firebase en nuestra aplicación, ahora vamos a crear nuestra aplicación: nuestra aplicación consistirá en un TextView donde aparecerá nuestro estado de animo y tres botones para cambiarlo deberá verse así:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.10.52-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.10.52-AM-161x300.png\" alt=\"Screen Shot 2016-05-02 at 11.10.52 AM\"></a></p>\n<p>Para a hacer esto vamos a App&gt;res&gt;layout&gt;activity_main.xml y mediante nuestro editor gráfico vamos a poner todo como nuestra vista anterior, los botones los nombraremos de manera que sea mas fácil acordarnos: (buttonAlegre, buttonTriste, buttonEnojado), mientras que el texView lo dejaremos simplemente “textView”:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.11.12-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.11.12-AM-300x159.png\" alt=\"Screen Shot 2016-05-02 at 11.11.12 AM\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.11.22-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.11.22-AM-300x194.png\" alt=\"Screen Shot 2016-05-02 at 11.11.22 AM\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.11.36-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.11.36-AM-300x152.png\" alt=\"Screen Shot 2016-05-02 at 11.11.36 AM\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.18.58-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.18.58-AM-300x290.png\" alt=\"Screen Shot 2016-05-02 at 11.18.58 AM\"></a></p>\n<p>La primera cosa que debemos hacer cuando vamos a trabajar con Firebase en nuestra aplicación es configurar el “Android Context”, esto se debe a que Firebase debe ser llamado en el primer ciclo de vida de nuestra aplicación. Para hacer esto vamos a crear una nueva clase adentro de java&gt;com.nuestropaquete.estadodeanimo. Para hacer esto hacemos click derecho, new&gt;Java Class, y en mi caso le colocaré el nombre de EstadoDeAnimo.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.19.14-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.19.14-AM-300x114.png\" alt=\"Screen Shot 2016-05-02 at 11.19.14 AM\"></a></p>\n<p>En esta clase partiremos de esto:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">java</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight java\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by seagomezar on 5/2/16.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EstadoDeAnimo</span> </span>{</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">a esto:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.seagomezar.estadodeanimo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.firebase.client.Firebase;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by seagomezar on 5/2/16.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EstadoDeAnimo</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">app</span>.<span class=\"title\">Application</span></span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        Firebase.setAndroidContext(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>package com.example.seagomezar.estadodeanimo;</p>\n<p>Ahora vamos incluir esta clase en nuestro AndroidManifest.xml<a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.28.00-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.28.00-AM-300x139.png\" alt=\"Screen Shot 2016-05-02 at 11.28.00 AM\"></a> Al hacer esto estamos configurando Firebase desde el comienzo del ciclo de vida de nuestra aplicación, ahora vamos a escribir la funcionalidad, para esto abrimos nuestro archivo MainActivity.java  y escribamos lo siguiente:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">java</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight java\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.seagomezar.estadodeanimo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.firebase.client.DataSnapshot;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.firebase.client.Firebase;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.firebase.client.FirebaseError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.firebase.client.ValueEventListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.firebase.client.realtime.util.StringListReader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    TextView mTextView;</span><br><span class=\"line\">    Button mButtonAlegre, mButtonTriste, mButtonEnojado;</span><br><span class=\"line\">    Firebase mRef;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">        mTextView = (TextView)findViewById(R.id.textView);</span><br><span class=\"line\">        mButtonAlegre = (Button)findViewById(R.id.buttonAlegre);</span><br><span class=\"line\">        mButtonEnojado = (Button)findViewById(R.id.buttonEnojado);</span><br><span class=\"line\">        mButtonTriste = (Button)findViewById(R.id.buttonTriste);</span><br><span class=\"line\">        mRef = <span class=\"keyword\">new</span> Firebase(<span class=\"string\">\"https://miendpointenfirebase.firebaseio.com/estado\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        mRef.addValueEventListener(<span class=\"keyword\">new</span> ValueEventListener() {</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDataChange</span><span class=\"params\">(DataSnapshot dataSnapshot)</span> </span>{</span><br><span class=\"line\">                String estado = dataSnapshot.getValue(String.class);</span><br><span class=\"line\">                mTextView.setText(estado);</span><br><span class=\"line\">            }</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancelled</span><span class=\"params\">(FirebaseError firebaseError)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">            }</span><br><span class=\"line\">        });</span><br><span class=\"line\"></span><br><span class=\"line\">        mButtonAlegre.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() {</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>{</span><br><span class=\"line\">                mRef.setValue(<span class=\"string\">\"Estoy Alegre! =)\"</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        });</span><br><span class=\"line\"></span><br><span class=\"line\">        mButtonTriste.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() {</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>{</span><br><span class=\"line\">                mRef.setValue(<span class=\"string\">\"Estoy Triste! =(\"</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        });</span><br><span class=\"line\"></span><br><span class=\"line\">        mButtonEnojado.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() {</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>{</span><br><span class=\"line\">                mRef.setValue(<span class=\"string\">\"Estoy Enojado! -.-\"</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Miremos en detalle que es lo que hacen las líneas mas importantes de nuestro código.</p>\n<p>En las lineas 15 a 17 declaramos las variables de nuestra App, una para cada elemento en la interfaz y una variable para manejar nuestro Firebase.</p>\n<p>En las líneas 27 a 31 enlazamos las variables con los elementos de la interfaz y en la línea 32 enlazamos nuestra variable local de Firebase con nuestro endpoint.</p>\n<p>  Entre las líneas 34 a 36 definimos un Listener que nos indica cuando cambia el valor en nuestro Endpoint, y en caso de que cambie vamos a obtener (línea 37) el valor que cambió y se lo vamos a asignar a una variable llamada estado, para luego en la línea 38 pasarla a nuestro TextView.</p>\n<p>Entre las líneas 47 a 66 simplemente creamos un Listener para cuando nuestro usuario pulse el botón cambiemos el valor del estado en nuestro EndPoint.</p>\n<p>Nota que el valor que se cambie o actualice será el mismo para todos los usuarios que tengan la aplicación.</p>\n<p>Estamos listos!!, Ahora dale play y déjate sorprender por lo bien que funciona, aunque este ejemplo es básico, te servirá de punto de partida para todas las aplicaciones en tiempo real que quieras desarrollar con Firebase y Android!!</p>\n<p>Aquí te dejo algunas imágenes de Nuestra Aplicación y el EndPoint.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.52.16-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.52.16-AM-300x88.png\" alt=\"Screen Shot 2016-05-02 at 11.52.16 AM\"></a><br><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.53.08-AM.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screen-Shot-2016-05-02-at-11.53.08-AM-300x77.png\" alt=\"Screen Shot 2016-05-02 at 11.53.08 AM\"></a><br><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screenshot_20160502-115246.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screenshot_20160502-115246-180x300.png\" alt=\"Screenshot_20160502-115246\"></a><br><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screenshot_20160502-115257.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2016/05/Screenshot_20160502-115257-180x300.png\" alt=\"Screenshot_20160502-115257\"></a></p>\n<p>Eso es todo, espero que este post te sea de utilidad, Si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>\n"},{"title":"Simple Login Con Angular 2 Parte 6","path":"simple-login-con-angular-2-parte-6/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/simple-login-con-angular-2-parte-6/","content":"<p>En este post haremos un sistema de login básico con Angular 2: El sistema de login que desarrollaremos en este tutorial consiste en que solo mostraremos un contenido, si el usuario se encuentra logueado en nuestro sistema para ello utilizaremos un usuario por defecto que responde a las credenciales username: test password: test.<br><a id=\"more\"></a><br>Así funcionará nuestro sistema de login una vez desarrollado:</p>\n<p> <img src=\"http://www.sebastian-gomez.com/shared/LogginSampleApp.gif\" alt=\"http://www.sebastian-gomez.com/shared/LogginSampleApp.gif\"></p>\n<p>En primer lugar revisemos las dependencias que tendrá nuestra aplicación y como sera la estructura de nuestro proyecto:<img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/LoginAppStructure.png\" alt=\"LoginAppStructure\"></p>\n<p>Como podrás notar respecto a nuestros anteriores proyectos, esta vez tenemos extensiones diferentes tales como .ts que hace referencia a typescript, y tsconfig.json donde estará la configuración de Typescript.</p>\n<p>Recuerda que si no sabes que es typescript, como instalarlo y como funciona te invito a que visites mi <a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular2-principios-de-typescript-parte-5/\" target=\"_blank\" rel=\"noopener\">anterior post</a> donde hablo sobre lo esencial de typescript y como usarlo en tus proyectos (inclusive si son proyectos sin Angular). Voy a suponer que ya sabes sobre esto así que manos a la obra, en primer lugar te mostrare el contenido de los archivos principales de nuestra aplicación, estos son package.json donde definimos las librerías y los comandos de nodeJS que son útiles para nuestro proyecto:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><span>package.json</span><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Login Angular 2\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: {</span><br><span class=\"line\">    <span class=\"string\">\"angular2\"</span>: <span class=\"string\">\"2.0.0-alpha.44\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"es6-shim\"</span>: <span class=\"string\">\"^0.33.13\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"systemjs\"</span>: <span class=\"string\">\"0.19.2\"</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: {</span><br><span class=\"line\">    <span class=\"string\">\"live-server\"</span>: <span class=\"string\">\"^0.8.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"typescript\"</span>: <span class=\"string\">\"^1.6.2\"</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: {</span><br><span class=\"line\">    <span class=\"string\">\"tsc\"</span>: <span class=\"string\">\"tsc -p src -w\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"live-server --open=src\"</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>tsconfig.json donde creamos y definimos nuestra configuración de typescript para nuestro proyecto:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><span>tsconfig.json</span><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: {</span><br><span class=\"line\">    <span class=\"string\">\"target\"</span>: <span class=\"string\">\"ES5\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"noImplicitAny\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Y finalmente  index.html donde incluimos nuestras dependencias e incluimos el componente principal de nuestra aplicación.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><span>index.html</span><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Angular 2 Login<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../node_modules/es6-shim/es6-shim.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../node_modules/systemjs/dist/system.src.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../node_modules/angular2/bundles/angular2.dev.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      System.config({</span></span><br><span class=\"line\"><span class=\"javascript\">        packages: {<span class=\"string\">'app'</span>: {<span class=\"attr\">defaultExtension</span>: <span class=\"string\">'js'</span>}}</span></span><br><span class=\"line\"><span class=\"undefined\">      });</span></span><br><span class=\"line\"><span class=\"javascript\">      System.import(<span class=\"string\">'app/app'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span>loading...<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>No me detendré explicando estos tres archivos anteriores dado que lo he repetido en los tutoriales anteriores sin embargo notemos una particularidad en index.html en las lineas 8-12, allí estamos diciendo que incluya el archivo app.js a nuestra aplicación, sin embargo notaras que en ningún momento hemos hablado de un archivo app.js. Básicamente el archivo app.js sera un archivo creado automáticamente por typescript y estará ubicado dentro de la carpeta app, nosotros en ningún momento deberíamos preocuparnos por su contenido.</p>\n<p>Es tiempo de definir nuestras vistas, como viste en la estructura del proyecto al inicio de este post te darás cuenta que tenemos una carpeta views y dentro de esta tendremos un archivo main.html y otro archivo llamado protected-component.html, a continuación te muestro su contenido:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><span>main.html</span><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login-component\"</span> *<span class=\"attr\">ng-if</span>=<span class=\"string\">\"!isLogged\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-group\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"title\"</span>&gt;</span>Username:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> #<span class=\"attr\">username</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-group\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"link\"</span>&gt;</span>Password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> #<span class=\"attr\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"login(username, password)\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">protected-component</span> *<span class=\"attr\">ng-if</span>=<span class=\"string\">\"isLogged\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">protected-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logout\"</span> *<span class=\"attr\">ng-if</span>=<span class=\"string\">\"isLogged\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"logout()\"</span>&gt;</span>Logout<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><span>protected-component.html</span><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Este es un componente protegido<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Verás que el archivo main.html tiene tres partes una primera sección donde tenemos un cuadro de login que se muestra únicamente si el usuario no esta logueado, luego una etiqueta llamada <protected-component> que sera el componente que únicamente es accesible para los usuarios logueados. Finalmente tenemos un div que nos permitirá desloguearnos y se mostrará únicamente cuando el usuario esta logueado. Por su parte el archivo protected-component.html no es mas que una simple línea de código donde ponemos un texto protegido.</protected-component></p>\n<p>Es tiempo entonces de crear nuestro archivo principal (Lo bueno usualmente viene de ultimo), nuestro archivo principal es el archivo app.ts y su contenido es el siguiente:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><span>app.ts</span><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> {bootstrap, Component, View, NgIf} <span class=\"keyword\">from</span> <span class=\"string\">'angular2/angular2'</span>;</span><br><span class=\"line\"><span class=\"comment\">//Protected-Content Component</span></span><br><span class=\"line\">@Component({</span><br><span class=\"line\">  selector: <span class=\"string\">'protected-component'</span></span><br><span class=\"line\">})</span><br><span class=\"line\">@View({</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'app/views/protected-component.html'</span></span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProtectedComponent</span></span>{</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Main Component</span></span><br><span class=\"line\">@Component({</span><br><span class=\"line\">  selector: <span class=\"string\">'main'</span></span><br><span class=\"line\">})</span><br><span class=\"line\">@View({</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'app/views/main.html'</span>,</span><br><span class=\"line\">  directives:\\[ProtectedComponent,NgIf\\]</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>{</span><br><span class=\"line\">  isLogged:boolean;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(){</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isLogged = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  login(username, password){</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username.value ==<span class=\"string\">\"test\"</span> &amp;&amp; password.value==<span class=\"string\">\"test\"</span>){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isLogged = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  logout(){</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isLogged = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\">bootstrap(Main);</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Al ser este nuestro archivo principal te lo explicare línea por línea:</p>\n<p>Línea 1: Importamos los componentes de angular 2 que necesitamos para crear nuestra aplicación, estos suelen ser mas o menos estándar en nuestro proyectos, nota que hemos importado bootstrap que si te fijas la ultima linea es el que nos permitirá incrustar nuestro componente principal en nuestra aplicación, también hemos incluido components y vistas ya que por defecto es lo mínimo que necesitamos para una aplicación de angular 2 usualmente todos proyectos de angular 2 incluyen dichos elementos, finalmente tenemos la inclusión de la directiva NgIf que nos permitirá usar condicionales en las vistas para mostrar uno u otro contenido.</p>\n<p>Línea 4 y 5: Es la definición de nuestro componente y la etiqueta por medio de la cual podremos invocamos a dicho componente desde el archivo principal index.html u otro componente.</p>\n<p>Línea 7 y 8: Definimos la vista del componente, en este caso simplemente incluimos el archivo protected-component.html desde la ruta.</p>\n<p>Línea 10 y 11: Es donde programamos la lógica de nuestro componente, pero en nuestro caso como es un simple texto no tiene ninguna lógica asociada.</p>\n<p>Línea 14 y 15: Allí definimos nuestro segundo componente y la etiqueta, como verás en el archivo index.html allí si invocamos directamente nuestro componente desde su selector.</p>\n<p>Línea 17 y 18: Nada expecial simplemente incluimos el archivo html o codigo html de nuestro componente desde la ruta especificada app/views/main.html.</p>\n<p>Línea 19: Es donde incluimos componentes internos o externos de nuestra aplicación para usarlos en nuestro componente actual, es decir en esta línea estamos diciendo que nuestro componente main podría utilizar el componente <protected-component>.</protected-component></p>\n<p>Línea 21 a 31: Es donde definimos que atributos tiene nuestro componente, en nuestro caso particular tenemos un solo atributo boolean llamado ‘isLogged’ donde guardamos el estado de nuestro usuario en nuestra aplicación, como veras este atributo en el constructor es instanciado a falso, (Recuerda que el constructor es el código que se ejecuta al crear el componente), Luego tenemos dos funciones muy sencillas, una función llamada login que dado el caso que el usuario sea ‘test’ y la contraseña sea ‘test’ entonces cambiara el valor de la variable isLogged a verdadero, de lo contrario no pasa nada. La segunda función logout, que se ejecuta al pulsar el botón simplemente vuelve el valor de ‘isLogged’ a false.</p>\n<p>Eso es todo ahora necesitamos poner a funcional nuestra aplicación. En primer lugar debemos instalar nuestras librerias de nodeJS y para eso usualmente usamos el comando <strong>npm install</strong>, luego en una terminal podremos ejecutar <strong>npm start</strong>. Sin embargo te darás cuenta que no funciona, y esto es porque como te dije al principio de este tutorial debemos generar nuestro archivo app.js a partir del archivo app.ts que hemos escrito, para ello simplemente escribes en el terminal <strong>tsc -p src -w</strong> y con esto se generara tu archivo app.js y ademas quedará esperando cambios en el archivo .ts dentro de tu aplicación. Hecho esto ya deberías tener en funcionamiento tu aplicación.</p>\n<p>Y eso es todo, recuerda Este post hace parte de una serie de tutoriales sobre Angular2. A continuación te dejo los links de los anteriores posts, por si te has perdido alguno:</p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/introduccion-a-angularjs-parte-0/\" target=\"_blank\" rel=\"noopener\">AngularJS 2 Parte 0</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-1-vs-angular-2-parte-2/\" target=\"_blank\" rel=\"noopener\">Qué es AngularJS? Parte 1</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-1-vs-angular-2-parte-2/\" target=\"_blank\" rel=\"noopener\">AngularJS 1 vs Angular 2? Parte 2</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-2-con-javascript-hola-mundo-parte-3/\" target=\"_blank\" rel=\"noopener\">Hola Mundo con Angular 2 Parte 3</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/ angular-2-aplicacion-que-saluda-parte-4 /\" target=\"_blank\" rel=\"noopener\">Angular 2 aplicación que saluda Parte 4</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular2-principios-de-typescript-parte-5/\" target=\"_blank\" rel=\"noopener\">Angular 2 Principios de TypeScript Parte 5</a></p>\n<p>Si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>\n"},{"title":"Angular, Principios de Typescript Parte 5","path":"angular2-principios-de-typescript-parte-5/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/angular2-principios-de-typescript-parte-5/","content":"<p>Si has seguido mis tutoriales sobre Angular hasta aquí te darás cuenta que he tratado al máximo de evitar el uso de Typescript, de hecho si revisas directamente la documentación de Angular te darás cuenta que de la mayoría de la documentación esta hecha en Typescript. Esto se debe básicamente el equipo de Angular decidio crear Angular sobre TypesScript, TypeScript es una colaboración oficial entre Google y Microsoft con el fin de orientar completamente Javascript a Objetos. </p>\n<a id=\"more\"></a>\n<p>Es decir que podamos usar con Javascript todo el “Paradigma de programación orientada a objetos”, como clases, constructores, métodos, Public, Private, Static, etc.</p>\n<h3 id=\"Que-es-TypeScript\"><a href=\"#Que-es-TypeScript\" class=\"headerlink\" title=\"Que es TypeScript?\"></a>Que es TypeScript?</h3><p>Podemos definir TypeScript como un transcopilador de Javascript (WTF?) Si un transcompilador básicamente TypeScript convierte el código TypeScript en código Javascript, sin embargo eso no es todo. Como te he contado en tutoriales pasados existen estándares de Javascript como ECMAScript 5 y ECMAScript 6, ECMAScript 5 es el estándar actual de Javascript que soportan la mayoría de los navegadores actuales, sin embargo ECMAScript 6 mejora el ECMAScript 5 con un montón de nuevas funcionalidades y no es soportado por muchos navegadores. Es por esto que TypeScript es un transcompilador de Javascript es decir que puede transformar tu código TypeScript en código Javascript compatible con ECMAScript 5 o ECMAScript 6.</p>\n<h3 id=\"Primeros-pasos-en-con-TypeScript\"><a href=\"#Primeros-pasos-en-con-TypeScript\" class=\"headerlink\" title=\"Primeros pasos en con TypeScript\"></a>Primeros pasos en con TypeScript</h3><p>En este tutorial nos olvidaremos de Angular2 en si, y nos dedicaremos solo a TypeScript de manera independiente, por tanto nuestro primer paso consistirá en la instalación de TypeScript. Para ello vamos a ejecutar el siguiente comando (Recuerda tener instalado NodeJS).</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> -g typescript</span><br></pre></td></tr></table></figure>\n<p>Hecho esto ya tenemos TypeScript en nuestro sistema, veamos ahora algunos ejemplos:</p>\n<h4 id=\"Variables-y-funciones-Typadas\"><a href=\"#Variables-y-funciones-Typadas\" class=\"headerlink\" title=\"Variables y funciones Typadas\"></a>Variables y funciones Typadas</h4><p>Simplemente puedes usar tipos de datos es decir  </p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nombre:string = <span class=\"string\">\"Esto es un string\"</span>;</span><br><span class=\"line\">edad:number = <span class=\"number\">43</span>;</span><br><span class=\"line\">bandera: boolean = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//recibe un string como parámetro y retorna un string como resultado</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hola</span>(<span class=\"params\">nombre:string</span>):<span class=\"title\">string</span></span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hola\"</span>+nombre;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<h4 id=\"Arreglos\"><a href=\"#Arreglos\" class=\"headerlink\" title=\"Arreglos\"></a>Arreglos</h4><figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Empresas: <span class=\"built_in\">Array</span>&lt;string&gt; = [<span class=\"string\">'IBM'</span>, <span class=\"string\">'Microsoft'</span>, <span class=\"string\">'Google'</span>];</span><br><span class=\"line\">Empresas: string[] = [<span class=\"string\">'Apple'</span>, <span class=\"string\">'Dell'</span>, <span class=\"string\">'HP'</span>];</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<h4 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h4><p>Puedes usar el tipo Any para ponerle un cualquier tipo a una variable, es como un comodin.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">algunaCosa: any = <span class=\"string\">'as string'</span>;</span><br><span class=\"line\">algunaCosa = <span class=\"number\">1</span>;</span><br><span class=\"line\">algunaCosa = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<h4 id=\"Void\"><a href=\"#Void\" class=\"headerlink\" title=\"Void\"></a>Void</h4><p>Puedes declarar métodos que no retornan nada.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setNombre</span>(<span class=\"params\">nombre: string</span>): <span class=\"title\">void</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.nombre = nombre;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<h4 id=\"Clases-y-Objetos\"><a href=\"#Clases-y-Objetos\" class=\"headerlink\" title=\"Clases y Objetos\"></a>Clases y Objetos</h4><p>Podemos crear clases con atributos, métodos y constructores.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">persona</span> </span>{</span><br><span class=\"line\">  nombre:string;</span><br><span class=\"line\">  edad:number;</span><br><span class=\"line\">  casado:boolean;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(nombre:string, edad:number, casado:boolean){</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.nombre = nombre;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.edad = edad;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.casado = casado;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  myMetodo():string{</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"Este metodo simplemente retorna un string\"</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\">persona = <span class=\"keyword\">new</span> Persona(<span class=\"string\">\"juan\"</span>,<span class=\"number\">12</span>,<span class=\"literal\">false</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<h4 id=\"Herencia\"><a href=\"#Herencia\" class=\"headerlink\" title=\"Herencia\"></a>Herencia</h4><p>Si! Aunque no lo creas puedes usar herencia con TypeScript y es ridículamente fácil:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Estudiante</span> <span class=\"keyword\">extends</span> <span class=\"title\">Persona</span> </span>{</span><br><span class=\"line\">  universidad:string;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(){</span><br><span class=\"line\">      <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<h3 id=\"Como-usar-TypeScript-en-mis-proyectos\"><a href=\"#Como-usar-TypeScript-en-mis-proyectos\" class=\"headerlink\" title=\"Como usar TypeScript en mis proyectos?\"></a>Como usar TypeScript en mis proyectos?</h3><p>Luego de haber instalado TypesScript debes crear tu archivo nombre.ts nota que termina en .ts porque es la notacion especifica de TypeScript. Una vez tengas esto tu puedes correr el comando</p>\n<p>tsc nombre.ts</p>\n<p>y veras que te creara un Archivo llamado nombre.js en la misma carpeta donde este tu archivo .ts, y es este archivo el que puede incluir en tus proyectos, independientemente que estés usando Angular2 o no. Otra caracteristica de TypeScript, es que como te dije puedes convertir tu codigo Javascript en ECMAScript 5 o ECMAScript 6, para ello puedes crear un un archivo  tsconfig.json y jugar con las siguientes acciones:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"></ul></figcaption><div class=\"tabs-content\"></div></figure>\n<p>Si usas este archivo puede ejecutar simplemente el comando:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tsc</span></span><br></pre></td></tr></table></figure>\n<p>Así el transformara todos los archivos con extensión .ts a .js sin necesidad de especificarle uno por uno. Y eso es todo, recuerda Este post hace parte de una serie de tutoriales sobre Angular. Aunque no vimos mucho sobre Angular en este Post te aseguro que estos principios nos serviran para continuar en el aprendizaje de Angular a continuación te dejo los links.</p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/introduccion-a-angularjs-parte-0/\" target=\"_blank\" rel=\"noopener\">Angular Parte 0</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-1-vs-angular-2-parte-2/\" target=\"_blank\" rel=\"noopener\">Qué es AngularJS? Parte 1</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-1-vs-angular-2-parte-2/\" target=\"_blank\" rel=\"noopener\">AngularJS vs Angular? Parte 2</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-2-con-javascript-hola-mundo-parte-3/\" target=\"_blank\" rel=\"noopener\">Hola Mundo con Angular Parte 3</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/ angular-2-aplicacion-que-saluda-parte-4 /\" target=\"_blank\" rel=\"noopener\">Angular aplicación que saluda Parte 4</a></p>\n<p>Si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.</p>\n"},{"title":"Angular 2 aplicación que saluda Parte 4","path":"angular-2-aplicacion-que-saluda-parte-4/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/angular-2-aplicacion-que-saluda-parte-4/","content":"<p>En este post vamos a adentrarnos un poco más en las características nuevas de Angular 2, si aún no estas lo suficientemente familiarizado con Angular 2 y su funcionamiento básico, <a id=\"more\"></a> te invito a que revises mi anterior post <a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-2-con-javascript-hola-mundo-parte-3/\" target=\"_blank\" rel=\"noopener\">Hola Mundo con Angular 2</a>. Vamos a construir una aplicación un paso más compleja que el hola mundo, esta aplicación saludará a alguien y guardará temporalmente en una lista a las personas que haya saludado. A continuación te muestro una imagen de como lucirá nuestra aplicación luego de haber saludado a tres personas.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/app.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/app-300x111.png\" alt=\"app\"></a></p>\n<p>En primer lugar te mostraré la estructura del proyecto que construiremos:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/estructura.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/estructura.png\" alt=\"estructura\"></a></p>\n<p>Bien entonces como verás respecto al tutorial anterior en el cual construimos un hola mundo básico, han cambiado varias cosas, en primer lugar hemos creado una carpeta views(vistas) donde tenemos dos archivos uno llamado cabecera.html y otro llamado saludador.html. En el archivo cabecera.html simplemente tenemos un texto básico donde se describe la aplicación:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Esta aplicación obtiene un nombre del cuadro de texto y luego dice \"Hola [Nombre]\"<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como puedes ver no es nada complejo, es simplemente codigo html básico. Sin embargo en el archivo saludador.html si verás muchas cosas nuevas.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hola { {yourName}}<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">name</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Pon tu nombre aquí\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"setName(name)\"</span>&gt;</span>Saludame<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Hasta la fecha e saludado a: <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ng-for</span>=<span class=\"string\">\"#saludado of saludados\"</span>&gt;</span>{ { saludado }} <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como verás la sintaxis para mostrar variables en Angular no ha cambiado mucho, simplemente { {yourName}} mostrará el contenido de la variable yourName en la vista. Ahora analicemos un poco la línea 2, verás que el input tiene algo extraño y nuevo verás un #name, básicamente esto es nuevo y reemplaza los ng-models de Angular en la versión 1, pero en que consiste?, simplemente Angular asocia este input con una variable en nuestra aplicación pero esta variable no es simplemente el texto sino el HTML object completo, es decir el input con todas las características asociadas a este ejemplo value, child, parent, etc… También verás que en esta misma línea creamos un botón y a la acción click  del botón denotada por (click) le asociamos una función setName donde mandamos el input #name completo.</p>\n<p>En la línea 4 verás la primera directiva nueva de Angular, esta directiva es *ng-for , y básicamente funciona como un ng-repeat, es decir para cada valor en el array saludados pondrá el contenido actual en saludado y este podrá ser accedido y usado como una variable “normal” dentro de las llaves.</p>\n<p>Pasemos ahora a nuestro archivo app.js, que es nuestro archivo principal donde manejaremos toda nuestra aplicación:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><span>app.js</span><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">var</span> AppTitle = ng.Component({</span><br><span class=\"line\">      selector: <span class=\"string\">'cabecera'</span>,</span><br><span class=\"line\">      templateUrl: <span class=\"string\">'views/cabecera.html'</span></span><br><span class=\"line\">    })</span><br><span class=\"line\">    .Class({</span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>: function () { }</span><br><span class=\"line\">    });</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Saludador = ng.Component({</span><br><span class=\"line\">        selector: <span class=\"string\">'saludador'</span>,</span><br><span class=\"line\">        templateUrl: <span class=\"string\">'views/saludador.html'</span>,</span><br><span class=\"line\">        directives: \\[ng.NgFor\\]</span><br><span class=\"line\">      })</span><br><span class=\"line\">      .Class({</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>: function () {</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.yourName = <span class=\"string\">\"sebas\"</span>;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.saludados = \\[<span class=\"string\">\"sebas\"</span>\\];</span><br><span class=\"line\">        },</span><br><span class=\"line\">        setName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>{</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.yourName = name.value;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.saludados.push(name.value);</span><br><span class=\"line\">          name.value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">      });</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    ng.bootstrap(AppTitle);</span><br><span class=\"line\">    ng.bootstrap(Saludador);</span><br><span class=\"line\">  });</span><br><span class=\"line\">})();</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Línea 1: Simplemente estamos rodeando todo el código de una función IIFE, esto significa Inmediated Invoked Function Execution que como su nombre lo indica será ejecutada tan pronto el archivo sea cargado o invocado desde un archivo html.</p>\n<p>Línea 2: Estamos declarando un componente de Angular, esta es la sintaxis para declarar componentes, los componentes son porciones de Javascript que opera sobre un template específico y que son utilizados desde los archivos html con una etiqueta o selector.</p>\n<p>Línea 3: Será el nombre del selector o etiqueta que utilizaremos para incrustar nuestro componente en los archivos html en nuestro caso será la etiqueta cabecera que debemos incluirla donde llamemos a nuestra aplicación.</p>\n<p>Línea 4: Es la ruta al archivo HTML que vamos a insertar en nuestra aplicación.</p>\n<p>Línea 6: Es una clase, si, una clase, una de las nuevas caracteristicas que tiene Angular es que está Basado en el ECMA script 6 y este nuevo estandar de Javascript ya soporta la palabra Class, dentro de la Class del componente se definirá el código Javascript que quieras que controle la aplicación y como quieras que lo haga, puedes definir atributos, constructores, métodos, etc etc, si quieres puedes aplicar todo el paradigma de la programación orientada a objetos allí mismo. Para el caso de nuestra cabecera como ves, esta no tiene ninguna funcionalidad por tanto la podemos dejar vacía.</p>\n<p>Línea 9, 10 y 11: Es nuestro segundo Angular Component llamado saludador, como verás la etiqueta con la cual podemos invocarlo se llama saludador y el templateUrl hace referencia a views/saludador.html que es el contenido HTML que vamos a insertar cuando invoquemos al selector.</p>\n<p>Línea 12: Esta es la nueva manera de incluir directivas en Angular, es decir si vas a usar alguna directiva propia, o del core de Angular, deberás específicamente incluirla en este array, y solo la podrás usar en el componente en el que la incluiste, otras directivas son por ejemplo : NgForm,  NgFormControl,  NgFormModel,  NgIf,  NgModel,    NgSelectOption,  NgClass, entre otras.</p>\n<p>Línea 14-18: Nuestra clase que controlará nuestro componente, nota que al interior tenemos un constructor que inicializará nuestras variables usadas, nota que la variable yourName es iniciada con el valor “Sebas” y nota que insertamos en el array de saludados también a “sebas”, ahora todo tiene sentido no?. Recuerda estas variables solo existen al interior de este selector, estas variables no se pueden usar en otro selector.</p>\n<p>Línea 19-22: Esta es la función principal de nuestra aplicación ya que es esta la que recibe el input enviado desde la vista, luego extrae su valor mediante .value, lo asigna a la variable yourName y lo inserta al array de saludados. Finalmente limpia el valor del input para que quede como nuevo.</p>\n<p>Línea 25-28: Estamos añadiendo un listener al documento, es decir cuando se haya cargado todo el DOM (Document Object Model) se cargue nuestros componente AppTitle con su selector cabecera y Saludador con su selector saludador, esto estará disponible por si algún archivo .html lo invoca.</p>\n<p>Hasta aquí estamos casi terminados pero falta ver nuestro archivo principal index.html para ver que ha cambiado.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Aprendiendo Angular 2<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"node_modules/angular2/bundles/angular2.sfx.dev.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cabecera</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cabecera</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">saludador</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">saludador</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Como verás simplemente hemos añadido nuestro componente saludador llamando su selector <saludador></saludador>, y esto es todo tenemos nuestra aplicación terminada.</p>\n<p>Y eso es todo, te felicito, has creado tu segunda aplicación usando Angular 2, si te perdiste en algo te recomiendo que visites mi post anterior <a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-2-con-javascript-hola-mundo-parte-3/\" target=\"_blank\" rel=\"noopener\">Hola Mundo con Angular 2</a> donde verás como instalar y organizar tu entorno para poder crear tus aplicaciones en Angular 2. Si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo. Este post hace parte de una serie de tutoriales sobre Angular 2, a continuación te dejo los links.</p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/introduccion-a-angularjs-parte-0/\" target=\"_blank\" rel=\"noopener\">AngularJS 2 Parte 0</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-1-vs-angular-2-parte-2/\" target=\"_blank\" rel=\"noopener\">Qué es AngularJS? Parte 1</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-1-vs-angular-2-parte-2/\" target=\"_blank\" rel=\"noopener\">AngularJS 1 vs Angular 2? Parte 2</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-2-con-javascript-hola-mundo-parte-3/\" target=\"_blank\" rel=\"noopener\">Hola Mundo con Angular 2 Parte 3</a></p>\n<p>En el siguiente Post veremos algo de TypeScript. =)</p>\n"},{"title":"Angular con Javascript Hola Mundo Parte 3","path":"angular-2-con-javascript-hola-mundo-parte-3/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/angular-2-con-javascript-hola-mundo-parte-3/","content":"<p>En este post construiremos una sencilla aplicación en Angular, que nos permita empezar a comprender el funcionamiento de Angular, y como usarlo. La aplicación consistirá simplemente en el típico hola mundo que es el proyecto insignia para iniciar el aprendizaje de un lenguaje de programación. <a id=\"more\"></a></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/Angular.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/Angular.png\" alt=\"Angular\"></a></p>\n<p>Recuerda que mucha de la documentación oficial ofrecida por el equipo de Angular en su versión 2 aún se encuentra en desarrollo. Sin embargo en cualquier momento puedes ir a: <a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Su página</a>.</p>\n<p>Bien, antes de empezar debemos tener instalado Node.js, ¿Porqué?, en primer lugar porque desde allí bajaremos los archivos de Angular2, y segundo porque también nos interesa obtener un live-server para desarrollar de una manera más cómoda. <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Este es el link para desacargar e instalar Node.js</a>.</p>\n<p>Luego que tengas Node.js instalado, debemos crear la carpeta donde tendremos nuestro proyecto: en mi caso se llama hola-angular2, adentro de esta carpeta vamos a crear nuestra aplicación por tanto vamos inicializar nuestro proyecto, para ello vamos a abrir nuestra terminal, git bash o cmd y vamos a escribir:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>La línea anterior hace parte de la sintaxis de Node.js ya que npm significa Node Package Manager, este línea creará un archivo llamado package.json, en este archivo nosotros debemos decirle a Node.js como se llama nuestro proyecto, darle una descripción e incluir las librerías externas que necesitamos, como te sugiero que quede tu archivo es de la siguiente manera:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"name\"</span>: <span class=\"string\">\"hola-angular2\"</span>,</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Esta es una aplicación para enseñar angular 2\"</span>,</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"scripts\"</span>: {</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp; <span class=\"string\">\"start\"</span>: <span class=\"string\">\"live-server\"</span></span><br><span class=\"line\">&nbsp; },</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"keywords\"</span>: \\[\\],</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"author\"</span>: <span class=\"string\">\"Sebastian Gomez\"</span>,</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"dependencies\"</span>: {</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp; <span class=\"string\">\"angular2\"</span>: <span class=\"string\">\"2.0.0-alpha.44\"</span></span><br><span class=\"line\">&nbsp; },</span><br><span class=\"line\">&nbsp; <span class=\"string\">\"devDependencies\"</span>: {</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp; <span class=\"string\">\"live-server\"</span>: <span class=\"string\">\"^0.8.2\"</span></span><br><span class=\"line\">&nbsp; }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Analicemos con mas detalle este archivo, en la línea dos definimos el nombre de nuestro proyecto, luego una descripción, en la línea 5 definimos cual será el archivo principal de nuestra aplicación y vemos que he escrito app.js, esto quiere decir que este es el punto de entrada nuestra aplicación y luego deberemos crear este archivo, luego en la línea 6 y 7 definimos un comando de node llamado “start” eso quiere decir que luego podremos escribir npm start y node intentará ejecutar “live-server”, pero que significa live server bueno como veras en las dev dependencies ahi escribi que quiero que node descargue un paquete llamado live-server, que básicamente lo que hará será escanear el contenido de la carpeta donde este el package.json y mostrar el contenido en el navegador, esto se quedará en ejecución en busca de cambios y si algo cambia refrescará el browser automáticamente, piénsalo como un pequeño servidor que se actualiza ante cualquier cambio que haya en los archivos al interior de nuestro proyecto.</p>\n<p>Como vez e incluido como dependencias de nuestra aplicación linea 12 y 13, a Angujar 2 en su release (como sub-versión) 44, al estar en alpha quiere decir que aún no es la versión final pero que está lista para que los desarrolladores empiecen a aprender y a probar las funcionalidades. Una vez definamos esto en nuestro archivo package.json debemos ejecutar el siguiente mando para que NodeJs instale las dependencias:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Y obtendremos un mensaje como el siguiente:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/h3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/h3.png\" alt=\"h3\"></a></p>\n<p>Bien hecho esto estamos listos para empezar a desarrollar nuestra aplicación. En primer lugar vamos a crear nuestro archivo app.js.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><span>app.js</span><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">var</span> AppTitle = ng.Component({</span><br><span class=\"line\">  &nbsp;&nbsp;&nbsp; selector: <span class=\"string\">'cabecera'</span>,</span><br><span class=\"line\">  &nbsp;&nbsp;&nbsp; template: <span class=\"string\">'&lt;h1&gt;Hola Mundo&lt;/h1&gt;'</span></span><br><span class=\"line\">  &nbsp; })</span><br><span class=\"line\">  &nbsp; .Class({</span><br><span class=\"line\">  &nbsp;&nbsp;&nbsp; <span class=\"keyword\">constructor</span>: function () { }</span><br><span class=\"line\">  &nbsp; });</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">  &nbsp; ng.bootstrap(AppTitle);</span><br><span class=\"line\">  });</span><br><span class=\"line\">})();</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Si alguna vez trabajaste con AngularJs en su versión 1 te darás cuenta que este archivo no es parecido en nada a lo que se trabajaba en dichar versión, por tanto debemos tomarnos con calma este archivo y tratar de entenderlo, asi que trataré de explicártelo lo mas específicamente posible línea por línea.</p>\n<p>Línea 1: Simplemente estamos rodeando todo el código de una función IIFE, esto significa Inmediated Invoked Function Execution que como su nombre lo indica será ejecutada tan pronto el archivo sea cargado o invocado desde un archivo html.</p>\n<p>Línea 2: Estamos declarando un componente de Angular 2, esta es la sintaxis para declarar componentes, los componentes son porciones de Javascript que opera sobre un template específico y que son utilizados desde los archivos html con una etiqueta o selector.</p>\n<p>Línea 3: Será el nombre del selector o etiqueta que utilizaremos para incrustar nuestro componente en los archivos html.</p>\n<p>Línea 4: Es el código html que incrustaremos en los archivos html que invoquen nuestro componente desde el selector.</p>\n<p>Línea 6: Es una clase, si, una clase, una de las nuevas caracteristicas que tiene Angular 2 es que está Basado en el ECMA script 6 y este nuevo estandar de Javascript ya soporta la palabra Class, dentro de la Class del componente se definirá el código Javascript que quieras que controle la aplicación y como quieras que lo haga, puedes definir atributos, constructores, métodos, etc etc, si quieres puedes aplicar todo el paradigma de la programación orientada a objetos allí mismo.</p>\n<p>Línea 7: Como te lo prometí en la linea anterior, dentro de la clase puede crear metodos, variables y constructores, esta es la sintaxis para definir el constructor, es decir código que quieres que se ejecute cuando se cree el componente, para nuestro ejemplo está vació pero puedes escribir algo de codigo allí.</p>\n<p>Línea 9: Estamos añadiendo un listener al documento, es decir cuando se haya cargado todo el DOM (Document Object Model) se cargue nuestro componente, por si algun archivo .html lo invoca.</p>\n<p>Línea 11: Finalmente cerramos nuestra función IIFE.</p>\n<p>Si has entendido lo anterior, empiezas a entender Angular 2, porque esa es su filosofía, todo está basado en web components pero web components orientados a objetos, sin embargo aún nos falta algo más para tener nuestra primera versión de la aplicación funcionando y es algún html que llame nuestro componente, porque si no es así no podremos ver que es lo que hemos hecho. Para ello te invito a que crees un archivo llamado index.html que contenga lo siguiente:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><span>app.html</span><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">&nbsp; <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">&nbsp;&nbsp;&nbsp; <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Aprendiendo Angular 2<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">&nbsp;&nbsp;&nbsp; <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"node_modules/angular2/bundles/angular2.sfx.dev.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&nbsp;&nbsp;&nbsp; <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&nbsp; <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">&nbsp; <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&nbsp;&nbsp;&nbsp; <span class=\"tag\">&lt;<span class=\"name\">cabecera</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cabecera</span>&gt;</span></span><br><span class=\"line\">&nbsp; <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Nuevamente trataré de explicarte el código detalladamente. En la línea 4 estamos incluyendo la librería de Angular 2, si te das cuenta al haber hecho npm install, NodeJs descargó estos archivos en una carpeta node_modules y ahi encontrarás Angular2. En la línea 5 incluimos nuestro archivo app.js el que elaboramos anteriormente. Y por fin en la línea 8 hemos incluido nuestro angular component. Si guardas todo deberías tener una estructura como esta:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/h1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/h1.png\" alt=\"h1\"></a></p>\n<p><img src=\"file:///C:/Users/Sebas/AppData/Local/Temp/enhtmlclip/Image.png\" alt=\"\"> Si es así estas listo y puedes corres el comando:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Luego de un momento te debería cargar una ventana en tu browser como la siguiente:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/h2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/11/h2.png\" alt=\"h2\"></a></p>\n<p>Y eso es todo, te felicito, has creado tu primera aplicación usando Angular, si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo. Este post hace parte de una serie de tutoriales sobre Angular2, a continuación te dejo los links.</p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/introduccion-a-angularjs-parte-0/\" target=\"_blank\" rel=\"noopener\">Angular 2 Parte 0</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-1-vs-angular-2-parte-2/\" target=\"_blank\" rel=\"noopener\">Qué es AngularJS? Parte 1</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-1-vs-angular-2-parte-2/\" target=\"_blank\" rel=\"noopener\">AngularJS vs Angular? Parte 2</a></p>\n"},{"title":"AngularJS vs Angular Parte 2","path":"angular-1-vs-angular-2-parte-2/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/angular-1-vs-angular-2-parte-2/","content":"<p>AngularJS en su versión 1 se define a si mismo como un conjunto de librerías de Javascript para la creación de aplicaciones web, mientras que Angular 2 se define a si mismo como una plataforma para creación de aplicaciones web y aplicaciones móviles. Estas son las respectivas definiciones que nos encontramos en la documentación oficial de dichas plataformas:</p>\n<a id=\"more\"></a>\n<p>Documentación oficial <a href=\"https://angularjs.org/\" target=\"_blank\" rel=\"noopener\">AngularJS</a></p>\n<p>Documentación oficial <a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Angular 2</a></p>\n<p>Pero analicemos un poco con más detalle en que consiste este cambio en las definiciones sobre que es Angular, en primer lugar se puede notar que en el sitio web de Angular 2 (angular.io)  no tiene el sufijo JS, esto significa que dejaremos de llamar a AngularJS como es conocido en su version 1.x por simplemente Angular, esto se debe básicamente a que han cambiado un poco su filosofía tratando de llevar Angular a un nivel superior ya que permite soportar de entrada TypeScript, Javascript y Dart, es decir en cualquiera de estos tres lenguajes, es posible trabajar con Angular de manera similar y trasparente. Segundo la definición de AngularJS (es decir la versión 1 de Angular) no incluye por ningún lado la frase “Mobile Applications” mientras que en la versión dos incluye explícitamente esta frase, esto significa que estarán enfocados en dar mas soporte a la construcción de aplicaciones móviles híbridas mejorando en general el desempeño y el uso de Angular en los dispositivos móviles, en temas como la memoria, el uso de red, el material design, entre otras cosas. Sin embargo también se espera que se mejore la interacción con Ionic (El popular framework para la creación de aplicaciones móviles híbridas basado en AngularJS), oficialmente en la página de Ionic, anuncian la versión dos que va de la mano con Angular.</p>\n<h4 id=\"Historia\"><a href=\"#Historia\" class=\"headerlink\" title=\"Historia\"></a>Historia</h4><p>Hace un tiempo atrás el equipo de angular tomo la decisión de cambiar drásticamente a AngularJS, Google y en general los developers de angular querían un mejor framework con una curva de aprendizaje menor y una serie de mejoras de desempeño abismales, esto lo anunciaron en el ng-conf 2015. Desde entonces el team de Angular ha hecho al rededor de 44 releases sobre esta nueva versión de angular llamada Angular 2 en adelante Angular.</p>\n<p>Pero cuales son las tan anheladas mejoras o diferencias respecto a AngularJS que se han tratado de materializar en Angular:</p>\n<p>Component-Based UI, Este concepto es familiar para aquellos desarrolladores que trabajan en ReactJS, sin embargo si nunca has trabajado con ReactJS no te preocupes yo te lo explicaré fácilmente, Angular no posee controladores ni directivas como si lo tiene AngularJS para comunicarse con la vista, en vez de eso Angular utilizará un concepto llamado componentes y dentro de esos componentes tu encontraras un selector es decir un elemento dentro del Document Object Model, que será el elemento a manipular por el componente.</p>\n<p>Así se hacía en AngularJS</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(‘example’)</span><br><span class=\"line\">  .controller(‘ExampleCtrl’, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Así se hace en Angular</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>&nbsp;AppComponent&nbsp;=&nbsp;ng.Component({</span><br><span class=\"line\">  selector:&nbsp;<span class=\"string\">'my-app'</span>,</span><br><span class=\"line\">  template:&nbsp;<span class=\"string\">'&lt;h1&gt;My&nbsp;First&nbsp;Angular&nbsp;2&nbsp;App&lt;/h1&gt;'</span></span><br><span class=\"line\">})</span><br><span class=\"line\">.Class({</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>:&nbsp;function&nbsp;()&nbsp;{&nbsp;}</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Sintaxís de eventos asociados a los inputs: Ahora las aplicaciones hechas en Angular 2 permiten que escribas el evento disparador entre paréntesis, por ejemplo en AngularJS tu debías escribir:</p>\n<p> Así se hace en AngularJS:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"thing.submit(item)\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Mientras que en Angular 2 ya lo harás así:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"submit(item)\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Adiós al $scope</p>\n<p>El famoso $scope que todos amamos y utilizamos en AngularJS se ha remplazado por el Controller As, y esto era evidente que iba a suceder debido a que desde la versión 1.2 de AngularJS estaban recomendando como buena práctica sustituirlo, como era antes?</p>\n<p>Así lo hacías en AngularJS:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(‘example’).controller(‘ExampleCtrl’, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>{</span><br><span class=\"line\">&nbsp; &nbsp; $scope.name = “John Smith”;</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Así se hace en Angular:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)&nbsp;</span>{</span><br><span class=\"line\">  <span class=\"keyword\">var</span>&nbsp;AppComponent&nbsp;=&nbsp;ng</span><br><span class=\"line\">  .Component({</span><br><span class=\"line\">    selector:&nbsp;<span class=\"string\">'my-app'</span>,</span><br><span class=\"line\">    template:&nbsp;<span class=\"string\">'&lt;h1&gt;My&nbsp;First&nbsp;Angular&nbsp;2&nbsp;App&lt;/h1&gt;'</span></span><br><span class=\"line\">  })</span><br><span class=\"line\">  .Class({</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>:&nbsp;function&nbsp;()&nbsp;{</span><br><span class=\"line\">  &nbsp; &nbsp; <span class=\"keyword\">this</span>.name = <span class=\"string\">\"John Smith\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  })();</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>El mejor desempeño: Esta ha sido una de las más grandes diferencias que se han anunciado con Angular 2 se habla mucho de su desempeño, y sus nuevas características asociadas como “ultra fast change detection” y “estructuras inmutables”, esto se debe a que ya no existe mas un “two-way data binding” (Doble enlazamiento de los datos) ya que entre otras cosas el concepto de ng-model también ha desaparecido.</p>\n<p>Recuerda que este post pertenece a una serie de tutoriales sobre Angular 2 desde cero, te invito a que revises mis anteriores posts:</p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/introduccion-a-angularjs-parte-0/\" target=\"_blank\" rel=\"noopener\">AngularJS 2 Parte 0</a></p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/que-es-angularjs-parte-1/\" target=\"_blank\" rel=\"noopener\">Qué es AngularJS? Parte 1</a></p>\n<p>o si vienes siguiente mis tutoriales, que avances al siguiente:</p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-2-con-javascript-hola-mundo-parte-3/\" target=\"_blank\" rel=\"noopener\">Hola mundo en Angular 2 Parte3</a></p>\n<p>Escríbeme si tienes alguna duda y no olvides si te ha gustado este post compartelo!</p>\n"},{"title":"¿Qué es AngularJs? Parte 1","path":"que-es-angularjs-parte-1/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/que-es-angularjs-parte-1/","content":"<p>AngularJS en su versión 1 es un framwework de Javascript para la construcción de aplicación web dinámicas, mientras que en su versión 2 (La que utilizaremos a lo largo de estos tutoriales)  es una plataforma de desarrollo para crear aplicaciones web y móviles usando los estándares modernos de la web. Pero cuales son los estándares modernos de la web?.<br><a id=\"more\"></a> Bien, cuando hablamos de estándares modernos de la web nos referimos concretamente a HTML5, CSS3, Javascript en su estándar más reciente llamado ECMAScript V6, y si te preguntas porqué son recientes, te darás cuenta que son tecnologías emergentes con menos de tres años. Y los navegadores web como Firefox, Chrome, Safari, e incluso IE tratan de darle mayor soporte a estos estándares.</p>\n<p>Angular en su versión 2 incluye un conjunto de características y beneficios que permiten que desarrollemos una App desde cero hasta una versión de producción súper optimizada, estas características son:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/angular11.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/angular11.png\" alt=\"angular11\"></a></p>\n<p>Mobile First: Es una filosofía que obliga a pensar como funcionaría tu APP en un dispositivo móvil, antes de  como se vería tu APP, en un una versión web y una pantalla “Normal”. AngularJS aporta a esto ya que posee un sistema de routing específico para mantener tu código de la aplicación liviano y los usuarios con baja banda ancha no necesitarán esperar. Además AngularJS incluye características para soportar gestos, toques y giros en el celular, siempre con un óptimo desempeño debido a que usa poca memoria.</p>\n<p>ECMAScript V6: AngularJS está escrito sobre el último estándar de Javasctipt, que entre las nuevas muchas características que trae soporte para clases, el operador =&gt; , let y const, nuevas maneras de asignar objetos, valores por defecto, módulos y más. Si quieres ver con mas detalle en que consiste el estandar ECMAScript V6, te invito a que leas su documentación oficial.</p>\n<p>Desarrollo Flexible: Apesar de que Angular tiene soporte para ECMAScript V6 y TypeScript, también ofrece retrocompatibilidad y funcionalidad con ECMAScript V5, Dart, CoffeeScript u otros lenguajes que compilen Javascript.</p>\n<p>Velocidad y Desempeño: Angular ofrece la detección de Cambio 5 veces más rápido gracias a que usa el estándar mas modernos de Javascript, esto significa que si tu quieres monitorear el estado de alguna variable, Angular te permite detectar el cambio increíblemente rápido.</p>\n<p>Simple y Expresivo: Permite escribir código limpio y natural, reduciendo la complejidad para tu equipo, haciendo el código altamente legible y entendible.</p>\n<p>Routing Coprensivo: Transiciones entre URLS, rutas hermana y rutas anidadas.</p>\n<p>Animaciones: AngularJS posee un conjunto de animación compatibles y  detección de eventos , por defecto Angular posee una API de animación que te permite crear incluso secuencias complejas de animación.</p>\n<p>Inyección de dependencias Jerárquica: Si esto suena muy técnico, no te preocupes después lo entenderemos, básicamente Angular posee la característica de mantener tu código modular, mantenible y extensible a través del tiempo mediante la inyección de dependencias, también te permite mediante esta característica probar tu código, de la manera correcta.</p>\n<p>Soporte para componentes web: Ofrece la creación e integración de web components como Polymer, X-Tag y otros.</p>\n<p>Internacionalización y Accesibilidad: Permite usar características de traducción, pluralización y reglas de género.</p>\n<p>Recuerda que este post pertenece a una serie de tutoriales sobre AngularJS desde cero, te invito a que revises mi post</p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/introduccion-a-angularjs-parte-0/\" target=\"_blank\" rel=\"noopener\">AngularJS 2 Parte 0</a></p>\n<p>o si vienes siguiente mis tutoriales, que avances al siguiente</p>\n<p><a href=\"http://www.sebastian-gomez.com/desarrollo-web/angular-1-vs-angular-2-parte-2/\" target=\"_blank\" rel=\"noopener\">AngularJS 1 vs Angular 2? Parte 2</a></p>\n<p>Escríbeme si tienes alguna duda y no olvides si te ha gustado este post compartelo!</p>\n"},{"title":"Sobrecarga de métodos","path":"sobrecarga-de-metodos/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/sobrecarga-de-metodos/","content":"<p>La sobrecarga de métodos es una herramienta que nos da la programación orientada objetos, ya que nos permite modelar y definir el comportamiento de los objetos como queramos, es decir de acuerdo a unos parámetros de entrada ejecutar uno u otro método. Concretamente en Java es posible sobrecargar métodos, es decir, definir dos o más dentro de la misma clase, que compartan nombre pero que las declaraciones de sus parámetros sean diferentes; la sobre carga es una forma de polimorfismo ya que en determinado momento un objeto puede asumir uno u otro comportamiento. <a id=\"more\"></a></p>\n<p>Cuando se llaman los métodos sobrecargados, el compilador determina cuál es el método invocado basándose en la cantidad y tipo de argumentos pasados; por consiguiente, los métodos sobrecargados deben diferir en números y tipo de parámetros. Cuando Java encuentra una llamada a un método sobrecargado, ejecuta la versión del que tiene parámetros (cantidad y tipo) que coinciden con los argumentos utilizados en la llamada.</p>\n<p>Java diferencia los métodos sobrecargados con base en el número y tipo de argumentos que tiene el método y no por el tipo que devuelve.</p>\n<p>También existe la sobrecarga de constructores: Cuando en una clase existen constructores múltiples, se dice que hay sobrecarga de constructores.</p>\n<p><strong>Ejemplo</strong></p>\n<p>Se define la clase Sobrecarga con tres métodos de nombre test sobrecargados, diferenciándose entre ellos por la cantidad/tipo de los parámetros main () llama a cada uno de ellos.</p>\n<p>El método test () se sobrecargó tres veces; la primera versión no tiene parámetros; la segunda, un entero y la tercera dos enteros.</p>\n<p><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/sobrecarga1-300x222.png\" alt=\"sobrecarga1\"> <img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/sobrecarga2-300x190.png\" alt=\"sobrecarga2\"> </p>\n<p>La ejecución da lugar a esta salida:<br><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/sobrecarga3-300x55.png\" alt=\"sobrecarga3\"> </p>\n<p>Listo, hemos terminado nuestra aplicación orientada a objetos y aplicando correctamente el concepto de herencia. Espero que este tutorial les haya sido de mas ayuda, recuerda “la práctica hace la perfección”, también si quieres aprender mas sobre el tema te invito a que veas estos posts: [Herencia y polimorfismo.]</p>\n<p>(<a href=\"http://www.sebastian-gomez.com/java/herencia-y-polimorfismo/\" target=\"_blank\" rel=\"noopener\">http://www.sebastian-gomez.com/java/herencia-y-polimorfismo/</a>) <a href=\"http://www.sebastian-gomez.com/java/entendiendo-la-herencia-con-un-ejemplo/\" target=\"_blank\" rel=\"noopener\">Herencia con un ejemplo.</a> <a href=\"http://www.sebastian-gomez.com/java/creacion-y-personalizacion-de-interfaces-graficas-usando-netbeans/\" target=\"_blank\" rel=\"noopener\">Interfaces en Java.</a> Escríbeme si tienes alguna duda y no olvides si te ha gustado este tutorial compartelo!</p>\n"},{"title":"Entendiendo la herencia con un ejemplo","path":"entendiendo-la-herencia-con-un-ejemplo/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/entendiendo-la-herencia-con-un-ejemplo/","content":"<p>En esta guía de ayuda nos disponemos a repasar temas fundamentales en la programación orientada a objetos como lo es la Herencia. Para tal fin, vamos a crear un programa en el entorno de desarrollo Netbeans. <a id=\"more\"></a></p>\n<p>Para comenzar, vamos a definir que es la herencia, aquí voy a dar una definición coloquial, es decir que voy a definir esto con mis palabras.</p>\n<p>-¿Qué es la herencia? à La herencia se utiliza con el fin de ahorrar líneas de código, si en una clase voy a utilizar lo mismo que utilice en otra clase, pues entonces en vez de copiarlo nuevamente, la extiendo y listo, eso es todo.</p>\n<p>La estructura es muy sencilla, simplemente la clase a la cual vamos a copiar el código que ya está escrito en otra le agregamos la palabra <strong>extend</strong> y luego el nombre de la clase de la cual se extiende.</p>\n<p>Ahora sí, vamos a pensar como programadores, supongamos que de la empresa EnlaceDieselTronic nos contrataron para realizar un software sencillo que en su primera etapa debe mostrarles el nombre de los empleados, la edad, el cargo y el horario de trabajo. Nosotros como programadores arriesgados, decidimos desarrollarlo en el lenguaje de programación Java, para desarrollarlo en ese lenguaje necesitamos un entorno de desarrollo apto para este, y nos decidimos por Netbeans.</p>\n<p>Teniendo instalado Java y Netbeans en nuestro equipo, nos disponemos a comenzar el proyecto.</p>\n<p>Lo primero que debemos hacer es crear un nuevo proyecto en <strong>Netbeans</strong>, para eso vamos a la pestaña <strong>file</strong> y luego en <strong>New Project.</strong></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia1-244x300.png\" alt=\"therencia1\"></a></p>\n<p>En la pestaña <strong>New project</strong> seleccionamos la opción <strong>Java application</strong> y esta a su vez nos arrojará a una nueva ventana.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia2-300x206.png\" alt=\"therencia2\"></a></p>\n<p>En esa nueva ventana ponemos el nombre con el cual queremos bautizar al proyecto, la ruta en donde queremos almacenarlo, y le damos <strong>finish</strong> para finalizar la creación.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia3-300x206.png\" alt=\"therencia3\"></a></p>\n<p>Ahora, ya con el proyecto creado en Netbeans, es nuestra labor comenzar con el proyecto. Para eso crearemos 3 clases, 1 principal llamada <strong>MAIN</strong> que es la que va a ejecutar el proyecto, 2 secundarias llamadas <strong>PERSONA</strong> y <strong>EMPLEADO.</strong></p>\n<p>Para eso damos clic derecho en el paquete en donde está guardado el proyecto, luego en <strong>New</strong>, y por último en <strong>Java Class.</strong></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia4-300x192.png\" alt=\"therencia4\"></a></p>\n<p>Aquí ya nos disponemos a nombrar las clases que vamos a crear, recordemos que son la clase Persona y la clase Empleado.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia5-300x207.png\" alt=\"therencia5\"></a></p>\n<p>Lo primero que vamos a hacer es crearle atributos a la clase persona, que será la clase básica para el proyecto que le vamos a desarrollar a EnlaceDieselTronic.</p>\n<p>La clase Persona será una clase padre, de esta heredará la clase Empleado. Por consiguiente, los atributos de la clase persona deberán ser usados en la clase Empleado.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia6-300x126.png\" alt=\"therencia6\"></a></p>\n<p>Como ya declaramos los atributos Nombre y Edad que son los más generales para una clase padre, nos disponemos a generar el constructor para inicializar estos datos.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia7-300x177.png\" alt=\"therencia7\"></a> Generado el constructor, vamos a retornar un mensaje con los atributos anteriormente generados. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia8.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia8-300x200.png\" alt=\"therencia8\"></a></p>\n<p>Ahora, nos disponemos a crear la clase empleado, en esta clase necesitamos el atributo <strong>Nombre</strong>, <strong>Edad</strong> y <strong>Cargo</strong>, aquí viene el sentido que tiene la Herencia, ¿Qué sentido tiene que en la clase empleado creemos el atributo <strong>Nombre</strong> y <strong>Edad</strong> sabiendo que en la clase básica ya los tiene declarados?, este es el sentido que tiene la Herencia, ahorrar líneas de código.</p>\n<p>En la siguiente imagen mostramos cual es la estructura que se debe seguir para aplicar la herencia.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia9-300x117.png\" alt=\"therencia9\"></a></p>\n<p>Valga la pena aclarar que el error que aquí aparece es debido a que todavía no hemos declarado el constructor.</p>\n<p>Ya declarado el constructor y agregados los atributos Cargo y Horario que necesitamos añadir, debería quedar así:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia10.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia10-300x193.png\" alt=\"therencia10\"></a></p>\n<p>Ahora nos falta el mensaje que vamos a retornar, debemos tener en cuenta que en la clase Persona ya teníamos un mensaje, y ese mismo debemos añadirlo al que vamos a crear aquí:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia11.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia11-300x179.png\" alt=\"therencia11\"></a></p>\n<p>Aquí comenzamos con un concepto antiguo y un nuevo concepto, el <strong>this</strong> y el <strong>super.</strong> El <strong>this</strong> es un apuntador al dato mismo donde este. Por esto, cuando ponemos el <strong>&lt;this.Cargo = Cargo&gt;</strong> o el <strong>&lt;this.Horario = Horario&gt;</strong> estamos apuntando a los atributos <strong>Cargo</strong> y <strong>Horario</strong> en donde estén de la clase.</p>\n<p>Ahora, el <strong>Super</strong> lo utilizamos cuando una clase herede de otra, y en la primera <strong>(Clase hija)</strong> defina un método que ya está definido en la segunda <strong>(Clase madre).</strong> El <strong>Super</strong> nos sirve para indicar que nos referimos al método de la clase Madre.</p>\n<p>Ya entendido el <strong>Super</strong> y el <strong>This</strong>, y terminadas ambas clases, nos disponemos a crear el <strong>Main</strong>, lo más sencillo por desarrollar.</p>\n<p>Aquí creamos el objeto Empleado, no tenemos necesidad de crear el Objeto para la <strong>Clase Persona</strong>, pues los parámetros que allí tenemos están incluidos en la <strong>Clase Empleado.</strong></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia12.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia12-300x187.png\" alt=\"therencia12\"></a></p>\n<p>Aquí vemos que nos arroja un error, esto se debe a que no le estamos enviado parámetros.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia13.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia13-300x192.png\" alt=\"therencia13\"></a></p>\n<p>Ya al enviarle parámetros el error desaparece.</p>\n<p>Lo único que nos falta para finalizar el programa es imprimir el mensaje.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia14.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia14-300x185.png\" alt=\"therencia14\"></a></p>\n<p>Aquí en la impresión del mensaje, lo que hacemos es poner la referencia de la clase Empleado que es donde está el mensaje completo (Vale la pena recordad que en la clase Persona también retornamos un mensaje, pero este lo estamos invocando desde la clase Empleado y lo estamos añadiendo al que allí pensamos retornar).</p>\n<p>El resultado de la ejecución del programa es el siguiente:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia15.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/therencia15-300x72.png\" alt=\"therencia15\"></a></p>\n<p>Listo, hemos terminado nuestra aplicación orientada a objetos y aplicando correctamente el concepto de herencia.</p>\n<p>Espero que este tutorial un poco más práctico les haya sido de mas ayuda, recuerda “la práctica hace la perfección”, también si quieres aprender mas sobre el tema te invito a que veas <a href=\"http://www.sebastian-gomez.com/java/herencia-y-polimorfismo/\" target=\"_blank\" rel=\"noopener\">este post</a>.</p>\n<p>Escríbeme si tienes alguna duda y no olvides si te ha gustado este tutorial compartelo!</p>\n"},{"title":"Herencia y Polimorfismo","path":"herencia-y-polimorfismo/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/herencia-y-polimorfismo/","content":"<p>Cuando hablamos de herencia, nos referimos a que una sub clase deriva de una clase superior adoptando todos los atributos y métodos  de la súper clase.<br><a id=\"more\"></a></p>\n<p><strong>Herencia</strong></p>\n<p>La herencia consiste en hacer uso de los atributos o métodos de una clase dentro de otra como si le perteneciera a este mismo. Esto se podría dar en un caso muy exclusivo para poder ahorrar proceso y código a implementar. Por ejemplo podría ser para una serie de empleados que ocupen diferentes cargos pero tienen atributos en común como el nombre, apellido, DNI, etc. Lo cual sería conveniente usar la herencia juntando los datos en común en una misma clase y distribuir clases independientes para los demás datos de los empleados.</p>\n<p>Herencias es un pilar muy útil en java como podemos ver para hacértelo más simple te diré otro ejemplo más sutil:</p>\n<p>Nuestros padres tienen sus vienes raíces que han construido con el paso del tiempo, claro es posible que ellos tenga sus hijos los cuales ellos serán los herederos de todo lo que tiene papá, adquiriendo así sus genes y dinero (en java heredaríamos sus atributos y métodos).</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia1-300x191.png\" alt=\"herencia1\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia2-300x225.png\" alt=\"herencia2\"></a> Ahora vamos a ver como es la sintaxis para definir las super clases (padre) y las sub clases (hija). Cuando vamos a definir  una sub clase  nuestro código sera así; <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia3-300x51.png\" alt=\"herencia3\"></a></p>\n<p>Extends, es una de las palabras reservadas de java la cual sera la que siempre utilizaras para relacionar y decir cual sera la clase padre (super-clase) que quieres que tome o herede todos sus atributos  e métodos.</p>\n<p>Al, hija extender de padre obtiene todos sus atributos y métodos y ten en cuenta que una sub clase no hereda sus constructores si quieres tenerlos tienes que hacer uso de esta palabra reservada en java  “Super” que se encarga de decir que vamos a utilizar el constructor de la super clase y también tiene como utilidad cuando vamos a redefinir un método, para mayor entendimiento te lo ilustrare.</p>\n<p>Extends, es una de las palabras reservadas de java la cual sera la que siempre utilizaras para relacionar y decir cual sera la clase padre (super-clase) que quieres que tome o herede todos sus atributos  e métodos.</p>\n<p>Al, hija extender de padre obtiene todos sus atributos y métodos y ten en cuenta que una sub clase no hereda sus constructores si quieres tenerlos tienes que hacer uso de esta palabra reservada en java  “Super” que se encarga de decir que vamos a utilizar el constructor de la super clase y también tiene como utilidad cuando vamos a redefinir un método, para mayor entendimiento te lo ilustrare.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia4-300x108.png\" alt=\"herencia4\"></a></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia5-300x113.png\" alt=\"herencia5\"></a></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia6-300x90.png\" alt=\"herencia6\"></a></p>\n<p>Acá hemos evidenciado la funcionalidad de la palabra super.</p>\n<p>Bueno ahora te contara algo que tiene java, es que desde que creamos un proyecto para nuestro aplicativo ya estamos presenciando lo de herencia, “como así!” pues es por que todo lo que realizamos en java y todas las super clase y sub clases que establezcamos nosotros como programadores, tenemos que saber que la clase principal (super clase), esta preestablecida por java es object, no la definimos nosotros ni nada pero ya esta incorporada y con todos sus métodos, es algo básico y útil conocer de ella.</p>\n<p>Mira la herencia es una de las maravillas y fuerte de la programación orientada a objetos por su alta utilidad y beneficio que tiene para nuestro desarrollo como programadores, a continuación les enseñare otro ejemplo de herencia utilizando el super para que lo repasemos y lo tengamos mas claro (como llamar los construtores del padre).</p>\n<p>  <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia7-300x258.png\" alt=\"herencia7\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia8.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia8-300x165.png\" alt=\"herencia8\"></a></p>\n<p>Observas que la clase Taxi e Autobús heredan los atributos y métodos de la super-clase Vehículo, así que gracias a la super clase se ahorrara la necesidad de volver a implementar o copiar el código, solo sera necesario  implementar los atributos que complementan a las sub clases, como <em>numeroLinecia();</em> de taxi y <em>numero Plazas(); .</em></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/herencia9-300x164.png\" alt=\"herencia9\"></a></p>\n<p>Observa  los modificadores de acceso para que hagas uso de ellos adecuadamente según las necesidades de la aplicación que estés realizando;</p>\n<table>\n<thead>\n<tr>\n<th>Modificador</th>\n<th>Clase</th>\n<th>Package</th>\n<th>Subclase</th>\n<th>Todos</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public</td>\n<td>Sí</td>\n<td>Sí</td>\n<td>Sí</td>\n<td>Si</td>\n</tr>\n<tr>\n<td>Protected</td>\n<td>Sí</td>\n<td>Sí</td>\n<td>Sí</td>\n<td>No</td>\n</tr>\n<tr>\n<td>No especificado</td>\n<td>Sí</td>\n<td>Sí</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Private</td>\n<td>Sí</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Polimorfismo</strong> El Polimorfismo es uno de los 4 pilares de la programación orientada a objetos (POO) junto con la Abstracción, Encapsulación y Herencia. Para entender que es el polimorfismo es muy importante que tengáis bastante claro el concepto de la Herencia. Consiste en la posibilidad de tener métodos con el mismo nombre en distintas clases. Al hablar de métodos en distintas clases nos estamos refiriendo a métodos distintos y por tanto con comportamientos distintos a pesar de que tengan el mismo nombre. El polimorfismo permite poder enviar un mismo mensaje (recordemos que un mensaje es una invocación a un método) a objetos de clases diferentes. Estos objetos recibirán el mismo mensaje pero responderán a él de formas diferentes. Por ejemplo, un mensaje “+” para un objeto entero significaría una suma, mientras que para un objeto String (cadena de caracteres) significaría la concatenación. </p>\n<p>Este tutorial ha sido realizado con la ayuda del estudiante Andres Felipe Vásquez. </p>\n<p><strong>Referencias</strong> </p>\n<ul>\n<li><a href=\"http://www.edukanda.es/mediatecaweb/data/zip/1305/page_14.htm\" target=\"_blank\" rel=\"noopener\">http://www.edukanda.es/mediatecaweb/data/zip/1305/page_14.htm</a> </li>\n<li><a href=\"http://cursos.aiu.edu/Lenguajes%20de%20Programacion%20Orientados%20a%20Objetos/PDF/Tema%204b.pdf\" target=\"_blank\" rel=\"noopener\">http://cursos.aiu.edu/Lenguajes%20de%20Programacion%20Orientados%20a%20Objetos/PDF/Tema%204b.pdf</a> </li>\n<li><a href=\"http://www.ifug.ugto.mx/~gerardo/programacion/4%20Java%20desde%20cero.pdf\" target=\"_blank\" rel=\"noopener\">http://www.ifug.ugto.mx/~gerardo/programacion/4%20Java%20desde%20cero.pdf</a></li>\n</ul>\n"},{"title":"Creación y Personalización de interfaces gráficas usando NetBeans","path":"creacion-y-personalizacion-de-interfaces-graficas-usando-netbeans/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/creacion-y-personalizacion-de-interfaces-graficas-usando-netbeans/","content":"<p>Trabajar JAVA desde NetBeans es una gran manera de agilizar algunos de nuestros desarrollos ya que nos permite hacer muchas cosas, pero una de las más importantes cosas es que nos ofrece NetBeans es la creación de interfaces gráficas por medio de una interfaz gráfica (Valga la redundancia).<br><a id=\"more\"></a> Podemos programar aplicando varios de los conceptos de la programación orientada a objetos: polimorfismo, herencia, todo lo que queramos por consola, pero, ¿Basta simplemente con limitarnos a ver los resultados que arroja nuestra aplicación en una consola o una ventana de resultados? Es por esto que si queremos avanzar, hacer y ver las cosas de una manera diferente, además de tener una aplicación con vista amigable ante los ojos del usuario o cliente, debemos empezar a trabajar con interfaces graficas o los famosos “form” que nos brindan muchísimas herramientas de programación.</p>\n<p>Es por esto que en este pequeño tutorial trataremos sobre este tema y se enseñarán las principales cosas o básicas a tener en cuenta, además de cómo hacerlo, al momento de trabajar con interfaces gráficas.</p>\n<p>Empezaremos creando un nuevo proyecto en NetBeans como normalmente lo hacemos.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-1.png\" alt=\"poo-1\"></a></p>\n<p>Crearemos un paquete en nuestra aplicación y dentro de él agregaremos un nuevo JFrame form, con el cual haremos un Loguin o Inicio de sesión a nuestra aplicación por medio de Interfaces gráficas. Es de muchísima importancia que nuestras aplicaciones a desarrollar tengan controles de accesos con inicios de sesión, puesto que cualquiera podría meterse a ella y arruinar o hacer modificaciones no deseadas a la aplicación de la compañía.</p>\n<p> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-2.png\" alt=\"poo-2\"></a></p>\n<p>Bastará con hacer click derecho sobre el paquete &gt; New &gt; JFrame form… Y ya tendremos la interfaz de lo que será nuestro Loguin.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-30.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-30-300x123.png\" alt=\"poo-30\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-3.png\" alt=\"poo-3\"></a></p>\n<p>Por lo que general en JAVA NetBeans luego de hacer esto nos quedara nuestra interfaz base y el cuadro de herramientas al lado derecho con el que trabajaremos.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-4-300x227.png\" alt=\"poo-4\"></a></p>\n<p>Dentro de la caja de herramientas o “Palette” nos iremos a Swing Controls y de allí arrastraremos un “Panel” o JPanel el cual bastara con arrastrarlo hasta nuestra interfaz. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-5.png\" alt=\"poo-5\"></a> Una vez hecho esto, después de agregar todos los Label, Button y Text Field necesarios tendremos algo parecido a esto: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-6-300x224.png\" alt=\"poo-6\"></a></p>\n<p>Los “Label” nos servirán para poner anuncios o textos simples dentro de nuestra interfaz, solo basta con arrastrar uno hasta la interfaz, darle click derecho &gt; Edit Text y ponerle el texto deseado a mostrar.</p>\n<p>Los “Text Field” o “Text Box, cajas de texto” serán los más importantes, puesto que nos servirán para recibir los datos o valores con que nuestra aplicación trabajará, hará cálculos o guardará en una base de datos en caso de estar trabajando con una.</p>\n<p>Y finalmente los “Button” o botones, nos desencadenaran la acción que queramos al momento de hacer click sobre alguno de ellos.</p>\n<p><strong>OJO:</strong> <em>Es importante saber que el TextField de “Password” no será una caja de texto común y corriente a las demás, puesto que ahí se ingresará la contraseña para el inicio de sesión.</em></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-7.png\" alt=\"poo-7\"></a></p>\n<p><em>Es por esto que dentro de la caja de herramienta buscaremos y arrastraremos un “Password Field” que será el que usaremos al momento de ingresar la contraseña para el inicio de sesión en nuestra aplicación. Más adelante veremos por qué no utilizar “TextField” o caja de texto común y corriente para el ingreso de la contraseña.</em></p>\n<p>Para empezar a programar la funcionalidad del botón o del inicio de sesión, daremos doble click al botón de nuestra interfaz, al que le dimos el nombre de “Ingresar” y nos abrirá dentro del código su evento o acción en la cual ingresaremos el código que nos servirá para que en el momento de hacer click al botón, éste ejecute el código dentro de él y así desencadene o dispare la acción a realizar.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-8.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-8-300x48.png\" alt=\"poo-8\"></a> Procedemos a insertar el código: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-9-300x161.png\" alt=\"poo-9\"></a></p>\n<p><strong>NOTA:</strong> <em>Para entender la funcionalidad del código y leer la explicación completa de cada uno, favor revisar los archivos .java del ejercicio, puesto que la explicación principal del tutorial es interfaces gráficas y por resumir no se explicarán dichos códigos aquí, ya están explicados dentro de los archivos…</em></p>\n<p>Ahora ya después de insertar el respectivo código dentro del botón, ya tendremos la funcionalidad de éste lista, así cada vez que el usuario ingrese su ID, contraseña y presione el botón “Ingresar” dicho código y acción se ejecutará y validará los datos recién ingresados, en caso de ser correctos le permitirá pasar al menú principal o en caso contrario le mostrará un mensaje indicando que ha ingresado algún dato incorrecto.</p>\n<p>Para personalizar nuestra ventana con un fondo, además de ponerle un logotipo o icono en la parte superior de la ventana, procedemos a ingresar el siguiente código en la clase principal de nuestro JFrame Loguin:</p>\n<p><strong>Nota_:_</strong> <em>Al momento en que visualizamos nuestra ventana “JFrame” estamos parados sobre la opción “Design”, para programar código dentro de tal, debemos seleccionar la opción “Source”</em></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-10.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-10-300x34.png\" alt=\"poo-10\"></a> <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-11.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-11-300x171.png\" alt=\"poo-11\"></a></p>\n<p>En el código anterior, estamos haciendo referencia a la imagen que será nuestro fondo y a la que será nuestro icono superior de la ventana. Esto se hace indicando la ubicación, el nombre del paquete o carpeta dentro del proyecto en donde están las imágenes y el nombre de la imagen a utilizar. <em>(Es importante poner los nombres tal cual, puesto que cualquier letra faltante, una mayúscula o minúscula no debida nos generaría un error)</em></p>\n<p>Por ende crearíamos un nuevo paquete dentro de nuestro proyecto donde sólo almacenaremos las imágenes o iconos a utilizar. Para agregarlas basta con arrastrarlas desde el “Escritorio” de nuestro computador o desde donde las tengamos hasta el paquete dentro de NetBeans.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-12.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-12.png\" alt=\"poo-12\"></a></p>\n<p>Luego de haber seguido todos los pasos anteriores ya deberíamos tener nuestra ventana de Inicio de sesión de la siguiente forma al momento de ejecutar el proyecto;</p>\n<p>A excepción del tipo de letra y color que se escogen a gusto personal por medio de las propiedades de cada “Label”, se selecciona el Label &gt; click derecho &gt; Propiedades y ahí cambiaríamos los estilos de letra y color.</p>\n<p>Nótese el icono en la parte de arriba de la ventana y un pequeño título.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-13.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-13-300x256.png\" alt=\"poo-13\"></a></p>\n<p>Es importante notar que si ingresamos el ID de usuario se visualizarán los caracteres de forma normal puesto que para él utilizamos un “TextField”.</p>\n<p>Mientras que al momento de ingresar la contraseña, sólo se visualizarán asteriscos en vez de los caracteres verdaderos que componen nuestra contraseña, esta es la propiedad única del “Password Field”, la cual nos ayuda a proteger nuestra contraseña haciendo que nadie la visualice al momento en que la digitamos.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-14.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-14-300x254.png\" alt=\"poo-14\"></a> En caso de ingresar algún dato incorrecto nos mostrará el siguiente mensaje. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-15.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-15-300x255.png\" alt=\"poo-15\"></a> Y luego de los tres intentos erróneos nos mostrará otro mensaje y nos sacará de la aplicación. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-16.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-16-300x246.png\" alt=\"poo-16\"></a> Luego de iniciar sesión nos debe mandar a una nueva ventana la cual será nuestro menú principal, procedemos a crearla. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-17.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-17-300x211.png\" alt=\"poo-17\"></a></p>\n<p>Para ello creamos un nuevo JFrame form de la misma forma en que creamos el primero y le agregamos Label y botones, un botón “Calculate” que nos llevará a otra nueva ventana y uno “Exit” que nos sacará de la aplicación.</p>\n<p>Lo único diferente que tendremos en esta nueva ventana será un “Menu Bar” que nos servirá para tener accesos directos y hacer las mismas funciones que hacen los dos botones.</p>\n<p>Bastará con arrastrarlo desde la caja de herramientas y acomodarlo a gusto en nuestro JFrame form.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-18.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-18.png\" alt=\"poo-18\"></a> Luego de arrastrarlo procedemos a darle nombre a cada opción. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-19.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-19-300x16.png\" alt=\"poo-19\"></a> Ahora desde la caja de herramientas arrastraremos un “Menu Item” para cada una de las dos opciones. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-20.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-20.png\" alt=\"poo-20\"></a> Bastará con seleccionar el “Menu Item” y arrastrarlo hasta la parte de arriba del “Menu Bar” donde dice Calcular y soltarlo. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-21.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-21.png\" alt=\"poo-21\"></a> Y ahora ya tenemos una sub-opción de nuestro acceso directo Calcular, el cual después de programarlo y añadirle una imagen, quedaría de la siguiente forma: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-22.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-22.png\" alt=\"poo-22\"></a> Lo mismo hacemos con el de Salir, agregamos un “Menu Item” y lo personalizamos. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-23.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-23.png\" alt=\"poo-23\"></a></p>\n<p>Para personalizar cada opción debemos de seleccionar el “Menu Item” &gt; click derecho &gt; Propiedades y desde allí seleccionar una imagen deseada que se encuentre dentro de nuestro proyecto y agregarle un texto. Ejemplo:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-24.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-24-300x144.png\" alt=\"poo-24\"></a></p>\n<p>Nótese lo anterior donde están los puntos rojos. Se selecciona un icono, se agrega un texto a mostrar y en “acelerator” se pone una tecla de acceso directo, la cual también se visualizará en forma de texto;</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-25.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-25.png\" alt=\"poo-25\"></a></p>\n<p>Con la única diferencia que si presionamos “Ctrl + S” nos ejecutará la acción deseada que programaremos a continuación dentro del código del JFrame form.</p>\n<p><em>(También en vez de presionar las teclas de acceso directo podemos hacer simplemente click y nos ejecutará la misma acción.)</em></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-26.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-26-300x192.png\" alt=\"poo-26\"></a></p>\n<p>Cada programación de los botones o accesos directos se hace y trabaja de la misma forma en que se programaron los botones en el JFrame form del Loguin. Luego de programar cada botón y acceso directo, además de personalizar con imagen de fondo e icono de ventana nuestro JFrame que será el menú principal, nos quedaría de la siguiente forma al ejecutarlo:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-27.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-27-300x233.png\" alt=\"poo-27\"></a> Con los accesos directos totalmente funcionales, ya sea por medio de click o las teclas: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-28.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-28-300x235.png\" alt=\"poo-28\"></a></p>\n<p>Ahora crearemos la ventana “Calcular” a la cual accederemos después de dar click al botón “Calculate” desde el anterior menú principal.</p>\n<p>Creamos un nuevo JFrame form y le agregamos los Label, Botones, Cajas de texto y demás cosas como lo explicamos al inicio del tutorial.</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-29.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-29-300x172.png\" alt=\"poo-29\"></a></p>\n<p>Agregaremos tres “TextField”, dos que nos servirán para ingresar dos números y otro que será para mostrar el resultado de la operación.</p>\n<p>También dispondremos de cuatro botones para realizar los cálculos, Sumar, Restar, Multiplicar y Dividir, además de uno para limpiar los campos y otro para regresar al menú principal.</p>\n<p>Procedemos a programar:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-30.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-30-300x123.png\" alt=\"poo-30\"></a></p>\n<p>En el Método principal de la Clase de nuestro JFrame form aplicamos el código para personalizar la ventana con imagen de fondo e icono de ventana como anteriormente lo hemos hecho en las ventanas anteriores.</p>\n<p>Programamos el evento click o acción del botón suma con el siguiente código:</p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-31.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-31-300x61.png\" alt=\"poo-31\"></a></p>\n<p>Los demás botones, Restar, Multiplicar y Dividir se programan de la misma forma con el mismo código, la única diferencia es que cambian los signos en la variable “Reslt” donde se realiza la operación; <strong>+</strong>, <strong>-</strong>, <strong>*</strong>, <strong>/</strong></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-32.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-32-300x215.png\" alt=\"poo-32\"></a></p>\n<p>Acciones a ejecutar cuando se de click a los botones Limpiar o Regresar:</p>\n<p> <strong><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-33.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-33-300x86.png\" alt=\"poo-33\"></a></strong> Ventana Calculadora ya ejecutada y aplicando la acción o evento del botón “SUMAR”: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-34.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-34-300x209.png\" alt=\"poo-34\"></a></p>\n<p><strong>Nota:</strong> <em>Hay que tener en cuenta que dentro del código para trabajar con todos los objetos de JFrame form es necesario añadir las librerías correspondientes:</em></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-35.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/poo-35-300x69.png\" alt=\"poo-35\"></a></p>\n<p>Y eso es todo tendremos lista una sencilla pero bonita interfaz gráfica. Si quieres descargar los archivos fuente haz <a href=\"http://sebastian-gomez.com/shared/sources.zip\" target=\"_blank\" rel=\"noopener\">click aquí</a>.</p>\n<p>(Este tutorial ha sido hecho con la colaboración del estudiante Diego Ramirez Montes del curso de programación orientada a objetos).</p>\n"},{"title":"Solución al problema de las torres de Hanoi usando PDDL","path":"solucion-al-problema-de-las-torres-de-hanoi-usando-pddl/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/solucion-al-problema-de-las-torres-de-hanoi-usando-pddl/","content":"<p>Las torres de hanoi (<a href=\"https://es.wikipedia.org/wiki/Torres_de_Han%C3%B3i\" target=\"_blank\" rel=\"noopener\">Explicacion del juego</a>), es un juego-problema clásico muy conocido en las ciencias de la computación dada su complejidad. Una de las ramas en las que cobra interés dicho problema es la planificación en inteligencia artificial dada la complejidad de este problema, palabras más palabras menos la planificación en inteligencia artificial es “El proceso de búsqueda y articulación de una secuencia de acciones que permitan alcanzar un objetivo” (vea más <a href=\"http://www.davidam.com/docu/aplic-ia/planific.html\" target=\"_blank\" rel=\"noopener\">aquí</a>). En este pequeño post pretendo ofrecer una representación de dicho problema en un lenguaje de planificación llamado <a href=\"https://en.wikipedia.org/wiki/Planning_Domain_Definition_Language\" target=\"_blank\" rel=\"noopener\">PDDL</a> (<strong>Planning Domain Definition Language</strong>) y como esta representación nos ayuda a obtener soluciones a dicho problema usando esta representación en el planificador <a href=\"https://courses.cs.washington.edu/courses/cse574/03sp/planners.html\" target=\"_blank\" rel=\"noopener\">LPG</a>. <a id=\"more\"></a></p>\n<h3 id=\"Las-Reglas-del-Juego\"><a href=\"#Las-Reglas-del-Juego\" class=\"headerlink\" title=\"Las Reglas del Juego\"></a><strong>Las Reglas del Juego</strong></h3><p>Un disco de mayor tamaño no puede ir encima de un disco de menor tamaño. Los discos deben ser apilados de mayor a menos, comenzando desde la base de la torre. Los discos se deben pasar de la torre uno (1) a la torre tres (3). Este juego puede ser jugado en <a href=\"http://www.juegosparalistos.es/Juegos_flash/hanoi.html\" target=\"_blank\" rel=\"noopener\">aquí</a>.</p>\n<h2 id=\"Planteamiento-del-Problema\"><a href=\"#Planteamiento-del-Problema\" class=\"headerlink\" title=\"Planteamiento del Problema\"></a><strong>Planteamiento del Problema</strong></h2><p>Una visión general del juego se puede ver de la siguiente manera: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-1-300x203.png\" alt=\"planning-1\"></a>  </p>\n<h3 id=\"Definicion-de-Objects\"><a href=\"#Definicion-de-Objects\" class=\"headerlink\" title=\"Definición de Objects\"></a><strong>Definición de Objects</strong></h3><p>¿Cuáles son los objetos que usaremos en el ejercicio? Tres discos y Tres torres, es decir: <strong>disco1, disco2, disco3, torre1, torre2, torre3</strong> Se tendrá un brazo mecánico el cual manipulara los discos<strong>.</strong></p>\n<h3 id=\"Estado-inicial\"><a href=\"#Estado-inicial\" class=\"headerlink\" title=\"Estado inicial\"></a><strong>Estado inicial</strong></h3><p>El estado inicial de donde parte el problema luce de la siguiente manera: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-2-300x114.png\" alt=\"planning-2\"></a>   Y dicho esto es hora de empezar a definir en lenguaje PDDL cada uno de los elementos que compondrán nuestro problema: (Problema en PDDL quiere decir la especificación de como esta el mundo antes de empezar estado inicial, y como queremos que quede luego de ejecutar el plan es decir estado final). Empezamos con la definición de nuestro problema: Se define la propiedad del objeto, es decir, el objeto “disco1”, se especifica que es un Disco, esto mismo se hace con los demás objetos <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-3.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-3.png\" alt=\"planning-3\"></a> Se debe definir que hay discos de mayor tamaño que otros, con el fin de cumplir una de las reglas de juego. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-4.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-4.png\" alt=\"planning-4\"></a> Se establece el orden de los discos acorde a su tamaño <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-5.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-5.png\" alt=\"planning-5\"></a> Se define que el disco de la parte superior quedo libre y que el brazo mecánico esta libre. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-6.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-6.png\" alt=\"planning-6\"></a> Se establece que las torres dos y tres están vacías. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-7.png\" alt=\"planning-7\"></a> Así nuestro estado inicial completo quedaría definido así:</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"symbol\">:domain</span> torres)</span><br><span class=\"line\">(<span class=\"symbol\">:objects</span> disco1 disco2 disco3 torre1 torre2 torre3)</span><br><span class=\"line\">(<span class=\"symbol\">:init</span> </span><br><span class=\"line\">(<span class=\"name\">esdisco</span> disco1)</span><br><span class=\"line\">(<span class=\"name\">esdisco</span> disco2)</span><br><span class=\"line\">(<span class=\"name\">esdisco</span> disco3)</span><br><span class=\"line\">(<span class=\"name\">estorre</span> torre1)</span><br><span class=\"line\">(<span class=\"name\">estorre</span> torre2)</span><br><span class=\"line\">(<span class=\"name\">estorre</span> torre3)</span><br><span class=\"line\">(<span class=\"name\">mayor</span> disco3 disco2)</span><br><span class=\"line\">(<span class=\"name\">mayor</span> disco3 disco1)</span><br><span class=\"line\">(<span class=\"name\">mayor</span> disco2 disco1)</span><br><span class=\"line\">(<span class=\"name\">torrevacia</span> torre2)</span><br><span class=\"line\">(<span class=\"name\">torrevacia</span> torre3)</span><br><span class=\"line\">(<span class=\"name\">entorre</span> disco3 torre1)</span><br><span class=\"line\">(<span class=\"name\">encima</span> disco2 disco3)</span><br><span class=\"line\">(<span class=\"name\">encima</span> disco1 disco2)</span><br><span class=\"line\">(<span class=\"name\">libre</span> disco1)</span><br><span class=\"line\">(<span class=\"name\">brazolibre</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Es tiempo de definir nuestro objetivo o estado final, una representación gráfica de ese se muestra a continuación: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-8.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-8-300x115.png\" alt=\"planning-8\"></a> Se define el estado de los discos y en la torre que va a quedar, además definir que el disco superior queda libre y que el brazo queda libre.</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"symbol\">:goal</span> (<span class=\"name\"><span class=\"builtin-name\">and</span></span></span><br><span class=\"line\">(<span class=\"name\">entorre</span> disco3 torre3)</span><br><span class=\"line\">(<span class=\"name\">encima</span> disco2 disco3)</span><br><span class=\"line\">(<span class=\"name\">encima</span> disco1 disco2)</span><br><span class=\"line\">(<span class=\"name\">libre</span> disco1)</span><br><span class=\"line\">(<span class=\"name\">brazolibre</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Una vez representado nuestro estado inicial y estado final, esto es guardado en un archivo .pddl usualmente llamado problem.pddl (Porque usualmente esto es lo que se quiere resolver). Ahora procederemos a hablar de nuestro dominio o representacion de las acciones que componen el mundo del problema de las torres de hanoi:</p>\n<p><strong>Planteamiento del dominio</strong> Definición de los predicados que serán usados para representar el estado del mundo: <strong>Encima</strong>: recibe dos variables que sean discos. <strong>Entorre</strong>: recibe una variable que sea disco y otra que sea torre. <strong>Libre</strong>: Pone en estado libre la variable que se le asigne. <strong>Sujeto</strong>: Al usar el brazo mecánico, el objeto recibido queda sujeto. <strong>Brazolibre</strong>: El brazo mecánico queda en estado libre. <strong>Mayor</strong>: Define que la primera variable es mayor que la segunda variable. <strong>Estorre</strong>: Define que la variable que recibe es una torre. <strong>Esdisco</strong>: Define que la variable que recibe es un disco. <strong>Torrevacia</strong>: Define que la torre queda vacía.</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"symbol\">:predicates</span> </span><br><span class=\"line\">(<span class=\"name\">encima</span> ?d1 ?d2)</span><br><span class=\"line\">(<span class=\"name\">entorre</span> ?d ?<span class=\"literal\">t</span>)</span><br><span class=\"line\">(<span class=\"name\">libre</span> ?d)</span><br><span class=\"line\">(<span class=\"name\">sujeto</span> ?d)</span><br><span class=\"line\">(<span class=\"name\">brazolibre</span>)</span><br><span class=\"line\">(<span class=\"name\">mayor</span> ?d1 ?d2)</span><br><span class=\"line\">(<span class=\"name\">estorre</span> ?<span class=\"literal\">t</span>)</span><br><span class=\"line\">(<span class=\"name\">esdisco</span> ?d)</span><br><span class=\"line\">(<span class=\"name\">torrevacia</span> ?<span class=\"literal\">t</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Definición de las acciones que cambiaran el estado del mundo:</p>\n<h3 id=\"Desapilar\"><a href=\"#Desapilar\" class=\"headerlink\" title=\"Desapilar\"></a>Desapilar</h3><p><strong>Parámetros:</strong></p>\n<p>Recibe dos variables tipo disco.</p>\n<p><strong>Precondiciones:</strong></p>\n<p>Validar que las dos variables que se reciben <strong>si sean discos.</strong></p>\n<p>La segunda variable debe ser <strong>mayor</strong> a la primera variable.</p>\n<p>La primera variable debe estar <strong>encima</strong> de la segunda variable.</p>\n<p>La <strong>primera Variable</strong> debe estar <strong>libre</strong>.</p>\n<p>El <strong>brazo mecánico</strong> debe estar <strong>libre</strong>.</p>\n<p><strong>Efecto:</strong></p>\n<p>La primera variable pasa a tener estado <strong>sujeto</strong>.</p>\n<p>La primera variable <strong>deja</strong> de estar <strong>encima</strong> de la segunda variable.</p>\n<p>La <strong>primera Variable</strong> no está <strong>libre</strong>.</p>\n<p>El <strong>brazo mecánico</strong> no está <strong>libre</strong>.</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"symbol\">:action</span> desapilar</span><br><span class=\"line\"><span class=\"symbol\">:parameters</span> (<span class=\"name\">?d1</span> ?d2)</span><br><span class=\"line\"><span class=\"symbol\">:precondition</span> (<span class=\"name\"><span class=\"builtin-name\">and</span></span> (<span class=\"name\">esdisco</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\">esdisco</span> ?d2)</span><br><span class=\"line\">(<span class=\"name\">mayor</span> ?d2 ?d1)</span><br><span class=\"line\">(<span class=\"name\">encima</span> ?d1 ?d2)</span><br><span class=\"line\">(<span class=\"name\">libre</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\">brazolibre</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"symbol\">:effect</span> (<span class=\"name\"><span class=\"builtin-name\">and</span></span> (<span class=\"name\">sujeto</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">encima</span> ?d1 ?d2))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">brazolibre</span>))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">libre</span> ?d1))</span><br><span class=\"line\">(<span class=\"name\">libre</span> ?d2)</span><br><span class=\"line\">)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Coger\"><a href=\"#Coger\" class=\"headerlink\" title=\"Coger\"></a>Coger</h3><p><strong>Parámetros:</strong></p>\n<p>Recibe una variable tipo disco y una variable tipo torre.</p>\n<p><strong>Precondiciones:</strong></p>\n<p><strong>L</strong>a primera variable debe ser <strong>tipo disco</strong></p>\n<p>La segunda variable debe ser <strong>tipo Torre.</strong></p>\n<p>La primera variable debe estar <strong>libre</strong>.</p>\n<p>La primera variable debe estar <strong>en la torre</strong> definida en la segunda</p>\n<p>El <strong>brazo mecánico</strong> debe estar <strong>libre</strong>.</p>\n<p>La torre <strong>no</strong> puede estar <strong>vacía</strong>.</p>\n<p><strong> Efecto:</strong></p>\n<p>La primera variable pasa a tener estado <strong>sujeto</strong>.</p>\n<p>La primera variable <strong>deja</strong> de estar <strong>en la torre</strong> de la segunda variable.</p>\n<p>La <strong>primera Variable</strong> no está <strong>libre</strong>.</p>\n<p>El <strong>brazo mecánico</strong> no está <strong>libre</strong>.</p>\n<p>La torre de la segunda variable pasa a estar vacía.</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"symbol\">:action</span> coger</span><br><span class=\"line\"><span class=\"symbol\">:parameters</span> (<span class=\"name\">?d1</span> ?t1)</span><br><span class=\"line\"><span class=\"symbol\">:precondition</span> (<span class=\"name\"><span class=\"builtin-name\">and</span></span> (<span class=\"name\">esdisco</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\">estorre</span> ?t1)</span><br><span class=\"line\">(<span class=\"name\">libre</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\">entorre</span> ?d1 ?t1)</span><br><span class=\"line\">(<span class=\"name\">brazolibre</span>)</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">torrevacia</span> ?t1))</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"symbol\">:effect</span> (<span class=\"name\"><span class=\"builtin-name\">and</span></span> (<span class=\"name\">sujeto</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">entorre</span> ?d1 ?t1))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">brazolibre</span>))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">libre</span> ?d1))</span><br><span class=\"line\">(<span class=\"name\">torrevacia</span> ?t1)</span><br><span class=\"line\">)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Apilar\"><a href=\"#Apilar\" class=\"headerlink\" title=\"Apilar\"></a>Apilar</h3><p><strong>Parámetros:</strong></p>\n<p>Recibe dos variables tipo disco.</p>\n<p><strong>Precondiciones:</strong></p>\n<p>Validar que las dos variables que se reciben <strong>si sean discos.</strong></p>\n<p>La segunda variable debe ser <strong>mayor</strong> a la primera variable.</p>\n<p>La primera variable debe estar con estado</p>\n<p>La <strong>segunda Variable</strong> debe estar <strong>libre</strong>.</p>\n<p>La primera variable <strong>no</strong> debe estar <strong>encima</strong> de la segunda variable.</p>\n<p>El <strong>brazo mecánico</strong> <strong>no</strong> está <strong>libre</strong>.</p>\n<p>La <strong>primera Variable</strong> no está <strong>libre</strong>.</p>\n<p><strong>Efecto:</strong></p>\n<p>La primera Variable pasa a estar <strong>libre</strong>.</p>\n<p>La primera variable <strong>pasa a</strong> estar <strong>encima</strong> de la segunda variable.</p>\n<p>El <strong>brazo mecánico</strong> pasa a estar <strong>libre</strong>.</p>\n<p>La primera variable pasa a tener estado <strong>no sujeto</strong>.</p>\n<p>La <strong>segunda Variable</strong> no está <strong>libre</strong>.</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"symbol\">:action</span> apilar</span><br><span class=\"line\"><span class=\"symbol\">:parameters</span> (<span class=\"name\">?d1</span> ?d2)</span><br><span class=\"line\"><span class=\"symbol\">:precondition</span> (<span class=\"name\"><span class=\"builtin-name\">and</span></span> (<span class=\"name\">esdisco</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\">esdisco</span> ?d2)</span><br><span class=\"line\">(<span class=\"name\">mayor</span> ?d2 ?d1)</span><br><span class=\"line\">(<span class=\"name\">sujeto</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\">libre</span> ?d2)</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">encima</span> ?d1 ?d2))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">brazolibre</span>))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">libre</span> ?d1))</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"symbol\">:effect</span> (<span class=\"name\"><span class=\"builtin-name\">and</span></span> (<span class=\"name\">libre</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\">encima</span> ?d1 ?d2)</span><br><span class=\"line\">(<span class=\"name\">brazolibre</span>)</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">sujeto?d1</span>))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">libre</span> ?d2))</span><br><span class=\"line\">)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Poner\"><a href=\"#Poner\" class=\"headerlink\" title=\"Poner\"></a>Poner</h3><p><strong>Parámetros:</strong></p>\n<p>Recibe una variable tipo disco y una variable tipo torre.</p>\n<p><strong>Precondiciones:</strong></p>\n<p><strong>L</strong>a primera variable debe ser <strong>tipo disco</strong></p>\n<p>La segunda variable debe ser <strong>tipo Torre.</strong></p>\n<p>La primera variable debe estar en estado <strong>sujeto</strong>.</p>\n<p>La primera variable <strong>no</strong> debe estar <strong>en la torre</strong> definida en la segunda variable.</p>\n<p>El <strong>brazo mecánico</strong> <strong>no</strong> debe estar <strong>libre</strong>.</p>\n<p>La primera variable <strong>no</strong> debe estar <strong>libre</strong>.</p>\n<p>La torre debe estar <strong>vacía</strong>.</p>\n<p><strong>Efecto:</strong></p>\n<p>La primera variable <strong>pasa a</strong> estar <strong>en la torre</strong> de la segunda variable.</p>\n<p>La <strong>primera Variable</strong> pasa a estar <strong>libre</strong>.</p>\n<p>El <strong>brazo mecánico</strong> pasa a estar <strong>libre</strong>.</p>\n<p>La primera variable pasa a tener estado <strong>no sujeto</strong>.</p>\n<p>La torre de la segunda variable pasa a estar <strong>ocupada</strong>.</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"symbol\">:action</span> poner</span><br><span class=\"line\"><span class=\"symbol\">:parameters</span> (<span class=\"name\">?d1</span> ?t1)</span><br><span class=\"line\"><span class=\"symbol\">:precondition</span> (<span class=\"name\"><span class=\"builtin-name\">and</span></span> (<span class=\"name\">esdisco</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\">estorre</span> ?t1)</span><br><span class=\"line\">(<span class=\"name\">sujeto</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">entorre</span> ?d1 ?t1))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">brazolibre</span>))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">libre</span> ?d1))</span><br><span class=\"line\">(<span class=\"name\">torrevacia</span> ?t1)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"symbol\">:effect</span> (<span class=\"name\"><span class=\"builtin-name\">and</span></span> (<span class=\"name\">entorre</span> ?d1 ?t1)</span><br><span class=\"line\">(<span class=\"name\">libre</span> ?d1)</span><br><span class=\"line\">(<span class=\"name\">brazolibre</span>)</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">sujeto?d1</span>))</span><br><span class=\"line\">(<span class=\"name\"><span class=\"builtin-name\">not</span></span> (<span class=\"name\">torrevacia</span> ?t1)))</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Hecho esto volcamos todo nuestro dominio a un archivo denominado domain.pddl. Ya con nuestros dos archivos domain.pddl y problem.pddl estamos listos para que nuestro planificador nos muestre posibles secuencias de acciones para llegar a la solución de nuestro problema, a continuación presento una de ellas: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-15.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/10/planning-15-300x208.png\" alt=\"planning-15\"></a> Es posible también realizar algunas variantes para soportar el problema con 4, 8 o N discos solo es cuestión de jugar un poco con el problem.pddl. Para descargar los archivos <a href=\"http://www.sebastian-gomez.com/shared/torresprobl.pddl\" target=\"_blank\" rel=\"noopener\">problem.pddl</a> o <a href=\"http://www.sebastian-gomez.com/shared/torresdom.pddl\" target=\"_blank\" rel=\"noopener\">domain.pddl</a> haz click sobre sus titulos.</p>\n"},{"title":"Generalidades sobre Cpp","path":"preguntas-frecuentes-sobre-c/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/preguntas-frecuentes-sobre-c/","content":"<p>En este pequeño post, trataré de resumir algunas de las preguntas iniciales a las que nos enfrentamos antes de iniciar en el mundo de la programación con C++, también pueden ser vistas como generalidades de C++.<br><a id=\"more\"></a><br><strong>¿Como surgió C++?</strong><br>La programación ha existido hace ya bastantes años. El lenguaje de programación C++ surgió como una modificación a los lenguajes  que ya existían en la época de los 70’s (C y pascal) para agregarles características que los hicieran más útil y rápidos, pero sobre todo se buscaba incorprar el paradigma de la programación orientada a objetos a estos lenguajes. Es allí donde surge C++, C++ es un lenguaje de programación diseñado en el año 1980 por Bjarne Stroustrup, surgió con la intención de ampliar el lenguaje de C, el cual permite la manipulación de objetos, así nace C++ que es una especie de combinación o hibrido. La principal razón por la cual se crea C++ es para añadir a el lenguaje de programación C más características tales y como son clases y funciones virtuales, tipos genéricos y expresiones, la posibilidad de declarar variables en cualquier punto del programa . </p>\n<p><strong>¿Para que tipo de problemas o proyectos funciona mejor C++?</strong><br>Actualmente C++ es utilizado para sistemas operativos como el de BlackBerry, incluso Windows utiliza “C” en su generalidad, es decir  “C” y “C++”. C++ también es muy utilizado para el desarrollo videojuegos (En compañia de otros lenguajes), pero su foco principal radica en la programación de microcontroladores y en general de drivers que permitan la interacción entre un dispositivo de hardware y un sistema operativo.  e incluso sirve para cálculos ya que su lenguaje es más directo por ende mejora su velocidad de ejecución. <strong>¿Cuál es la relación de C++ con los videojuegos?</strong> C++ tiene una estrecha e importante relación en torno a los videojuegos, ya que es un lenguaje de programación de alto nivel, complejidad y completitud debido a su gran capacidad de administración de recursos de forma eficiente, eficaz, y versatil. Por lo general c++ se usa para programas que requieren alto rendimiento entre ellos los videojuegos. De hecho ha sido uno de los lenguajes de programación más usados para el desarrollo de videojuegos, ejemplo de ello el conocido juego world of warcraft tiene gran cantidad de componentes desarrollados en C++. <strong>¿Qué se puede hacer y que no se puede hacer con C++?</strong> En general con C++, es posible hacer casi cualquier tarea de programación, sin emabrgo su foco principal radica en la creacion de drivers, sistemas operativos, Videojuegos o motores para ellos, programas científicos e incluso virus informáticos. Aunque también se puede C++ no es muy usado para realizar aplicaciones web o bases datos, aunque algunos gestores de bases de datos se encuentran hechos sobre C++. <strong>¿Qué es un compilador?</strong> Es un programa informático que permite traducir un lenguaje de programación a un lenguaje de máquina para que pueda ser procesado y ejecutado por un computador o dispositivo. Normalmente el lenguaje o codigo al que es traducido es un lenguaje de máquina, sinembargo también puede ser un código intermedio o simplemente texto. Este proceso de traducción se conoce como compilación. <img src=\"http://4.bp.blogspot.com/-mttN8caI0Ws/TkG_8ZRZRUI/AAAAAAAAAAs/w9zycbYozkw/s1600/compilador.png\" alt=\"\"> <strong>¿Cómo funciona un compilador?</strong> El compilador se encarga de pasar un lenguaje de programación a un lenguaje de máquina, este proceso consta de varias fases, la cuales son: <strong>Fase de análisis</strong>: Esta fase se compone por tres tipos de análisis, los cuales son: Análisis léxico, sintáctico y semántico. <strong>Análisis Léxico</strong>: En este análisis se lee el programa fuente de izquierda a derecha y se agrupan en componentes léxicos, también los espacios en blanco y líneas en blanco y los comentarios y demás información innecesaria se elimina del programa fuente. <strong>Análisis Sintáctico</strong>: En esta parte los caracteres se agrupan de manera jerárquica en frases que el compilador utiliza para facilitar la salida y se comprueba si lo anterior que se ha hecho ha sido correcto. <strong>Análisis Semántico</strong>: En esta fase se buscan los errores semánticos y se utiliza la estructura jerárquica anteriormente formada para identificar los operadores de expresiones y preposiciones y el compilador verifica si cada operador tiene operandos. <strong>Fase de Síntesis</strong>: En esta se genera el código objeto cuando el programa está libre de errores de análisis, lo cual no quiere decir que el programa se ejecute correctamente, ya que un programa puede tener errores de concepto o expresiones mal calculadas. <strong>Fase de Optimización:</strong> En esta se mejora el código intermedio, de modo que resulte un código de maquina más rápido de ejecutar. <img src=\"http://www.monografias.com/trabajos11/compil/Image5526.gif\" alt=\"\"> <strong>¿Algunos compiladores de C++?</strong></p>\n<ul>\n<li><a href=\"https://es.wikipedia.org/wiki/C%2B%2BBuilder\" target=\"_blank\" rel=\"noopener\">C++Builder</a></li>\n<li><a href=\"https://es.wikipedia.org/wiki/Carbide.c%2B%2B\" target=\"_blank\" rel=\"noopener\">Carbide c++</a></li>\n<li><a href=\"https://es.wikipedia.org/wiki/Clang\" target=\"_blank\" rel=\"noopener\">Clang</a></li>\n<li><a href=\"https://es.wikipedia.org/wiki/G%2B%2B\" target=\"_blank\" rel=\"noopener\">G++</a></li>\n<li><a href=\"https://es.wikipedia.org/wiki/GNU_Compiler_Collection\" target=\"_blank\" rel=\"noopener\">GNU Compiler Collection</a></li>\n<li><a href=\"https://es.wikipedia.org/wiki/Intel_C%2B%2B_Compiler\" target=\"_blank\" rel=\"noopener\">Intel C++ Compiler</a></li>\n</ul>\n<p><strong>¿Qué es una IDE  (Integrated Development Environment - Ambiente de Desarrollo Integrado)?</strong> Conocida también con el nombre de  o entorno de desarrollo interactivo esta es una herramienta que le permite al usuario escribir y desarrollar de una manera más fácil programas en donde se permite desarrollar el lenguaje de programación de manera interactiva, con ayudas visuales y atajos de teclado sin necesidad de trabajo orientado a archivos de texto. En términos generales una IDE brindá ayudas visuales en la sintaxis, usando plantillas, wizards, plugins y sencillas opciones para probar y hacer un debug, para así facilitar la escritura y el desarrollo de un programa. Un IDE debe tener las siguientes características:</p>\n<ul>\n<li>Multiplataforma</li>\n<li>Soporte para diversos lenguajes de programación</li>\n<li>Integración con Sistemas de Control de Versiones</li>\n<li>Reconocimiento de Sintaxis</li>\n<li>Extensiones y Componentes para el IDE</li>\n<li>Integración con Framework populares</li>\n<li>Depurador</li>\n<li>Importar y Exportar proyectos</li>\n<li>Múltiples idiomas</li>\n<li>Manual de Usuarios y Ayuda</li>\n</ul>\n<p>¿IDEs para desarrollar en C++? <strong>Code::Blocks </strong> Tiene un buen entorno de desarrollo integrado para C++, con capacidad para instalar muchas bibliotecas importantes. Se encuentra en inglés, pero es muy entendible y fácil de usar. Actualmente tiene la mayor cantidad de usuarios de países hispanoparlantes y angloparlantes del mundo, que cualquier otro IDE. <strong>Dev c++</strong> Cuenta con uno de los mejores entornos de desarrollo,  y tiene la ventaja de tratarse de una aplicación totalmente gratis. Este IDE presenta una interfaz sencilla que facilita el manejo tanto del editor de código como del compilador que integra. Las principales características de Dev-C++ son: – Uso del compilador MinGW (Minimalist GNU for Windows) – Práctico editor de código con coloreado de sintaxis, opciones de búsqueda, reemplazar, – Gran cantidad de opciones de configuración para personalizar el compilador, el entorno o el propio editor. – Inserción de marcadores y puntos de ruptura. – Uso de atajos de teclado. – Posibilidad de añadir, editar o eliminar herramientas. – Selección de diferentes temas para la interfaz. <strong>Visual C++ Studio</strong> Es un IDE versión de Microsoft, y además es uno de los más completos de todos los entornos para trabajar en C++. Cuenta con unas librerías muy completas (el conjunto SDK) podemos crear casi de todo, y además es la plataforma utilizada por más del 90% de los desarrolladores de video juegos ya sea en 2D o en 3D. Tiene compilador veloz, un depurador excelente, permite el encarpetamiento de clases (para mejorar la organización de los proyectos) y tiene una integración sencilla con herramientas externas. También tiene sus desventajas, por ejemplo, requiere demasiadas especificaciones antes de poder empezar a un proyecto, es un producto caro, no es recomendable para personas inexpertas en la programación C++ y requiere más memoria que sus competidores. <strong>BloodShedb DEV C++</strong> Es un entorno gratuito, además  va marcando el código en diferentes colores para una mejor comprensión del mismo. Sus librerías se van actualizando día a día con versiones nuevas en Internet y sus requerimientos de memoria son bajos. Una desventaja que tiene este IDE es que no posee diseñador de formularios pero puede ser complementado con librerías como qt. <strong>Borland C++ Builder 6.0</strong> Es un entorno excelente y una gran opción ya que permite el desarrollo de proyectos con interfaces de usuario complejas de manera fácil y permite recompilar proyectos de C++ en Linux. No es gratuito, tiene un depurador algo pobre, contiene un compilador más lento que el de Visual Studio y solo permite importar proyectos de Visual Studio 6 o aquellos cuales tengan código en ANSI C++. <strong>Eclipse</strong> Este IDE es una gran opción para proyectos pequeños, medianos y hasta algunos grandes, al igual que DEV C++ colorea el código y es gratuito. Es un proyecto creado dentro del ámbito universitario y está en constante actualización. Contiene un buen depurador, utiliza MinGW y contiene muchas opciones para la creación de proyectos con POO. Sus desventajas son: la lentitud tanto para compilar como para depurar, y su instalación es cansada. Necesitas tener motor java instalado ya que originalmente se creó como un IDE para java y contiene algunos bugs, sin embargo no deja de ser una de las mejores opciones, algo difícil al principio pero puede ser realmente útil. <strong>Netbeans</strong> Muy difundido y conocido por una gran cantidad de programadores Netbeans es una herramienta multilenguaje y multiplataforma en la cual podemos desarrollar software de calidad. Con él puedes crear aplicaciones web y de escritorio, además de contar con plugins para trabajar en Android. <strong>¿Existen más lenguajes de programación aparte de C++?</strong></p>\n<p>C++</p>\n<p>JAVA</p>\n<p>PHP</p>\n<p>PYTHON</p>\n<p>Permite agrupar sus instrucciones.   Maneja los punteros (variable que maneja la dirección de otra variable)   Tiene un conjunto completo de instrucciones de control.   Rendimiento 10 veces superior a JAVA.   Lenguaje hibrido, que permite tambien la aplicación del paradigma de programación orientada a objetos.   Permite herencia múltiple.    </p>\n<p>Lenguaje  Simple, complemtamente orientado a Objetos.</p>\n<p>  Permite abrir sockets, establecer y aceptar conexiones con los servidores o clientes remotos Seguro Puede ser compilado e interpretado en tiempo real,  ya que  cuando se construye el código fuente este se transforma en una especie de código de máquina.   Permite la reutilización de componentes de software mas facilmente que C++.  </p>\n<p>Es un lenguaje multiplataforma.   Completamente orientado al desarrollo de aplicaciones web dinámicas con acceso a información almacenada en una Base de Datos.   Permite aplicar técnicas de programación orientada a objetos.   Biblioteca nativa de funciones sumamente amplia e incluida.   Capacidad de conexión con la mayoría de los motores de base de datos que se utilizan en la actualidad, destaca su conectividad con MySQL y PostgreSQL.</p>\n<p>Su estructura es más compacta.   Es más rápido a la hora de cargar.   Consume menos memoria.   Tiene extensiones de c++.   El mismo código funciona en cualquier plataforma, la única condición es que maneje el intérprete del lenguaje.</p>\n<p>  <strong>Referencias: </strong> <a href=\"https://es.wikibooks.org/wiki/Programaci%C3%B3n_en_C%2B%2B/Introducci%C3%B3nhttp://es.ccm.net/forum/affich-734903-para-que-sirve-el-programa-c\" target=\"_blank\" rel=\"noopener\">https://es.wikibooks.org/wiki/Programaci%C3%B3n_en_C%2B%2B/Introducci%C3%B3nhttp://es.ccm.net/forum/affich-734903-para-que-sirve-el-programa-c</a> <a href=\"http://ingsistemascompilador.blogspot.com.co/p/conceptos-basicos-sobre-compiladores.html\" target=\"_blank\" rel=\"noopener\">http://ingsistemascompilador.blogspot.com.co/p/conceptos-basicos-sobre-compiladores.html</a> <a href=\"http://www.zator.com/compiladoresC.htm\" target=\"_blank\" rel=\"noopener\">http://www.zator.com/compiladoresC.htm</a> <a href=\"https://es.wikipedia.org/wiki/Ambiente_de_desarrollo_integrado\" target=\"_blank\" rel=\"noopener\">https://es.wikipedia.org/wiki/Ambiente_de_desarrollo_integrado</a> <a href=\"http://michelletorres.mx/que-es-un-ide-los-ide-mas-utilizados-para-c/\" target=\"_blank\" rel=\"noopener\">http://michelletorres.mx/que-es-un-ide-los-ide-mas-utilizados-para-c/</a> <a href=\"https://es.opensuse.org/C%2B%2B\" target=\"_blank\" rel=\"noopener\">https://es.opensuse.org/C%2B%2B</a></p>\n"},{"title":"Como crear espectaculares presentaciones usando HTML y CSS","path":"como-crear-espectaculares-presentaciones-usando-html-y-css/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/como-crear-espectaculares-presentaciones-usando-html-y-css/","content":"<p>Muchas veces en cursos o conferencias que presenciamos nos hemos encontrado con una novedosa manera de ver  el contenido o la información que nos es presentada. Esta forma es mediante el navegador web que ofrece grandes ventajas respecto a los métodos tradicionales de creación de diapositivas como Powerpoint o Prezi. <a id=\"more\"></a> Crear este tipo de presentaciones es relativamente fácil y esto crea un gran impacto en nuestra audiencia. No necesitamos grandes conocimientos técnicos ni nada por el estilo, simplemente necesitamos la decisión de hacer las cosas diferentes y de aprender algo nuevo. Así que manos a la obra, en este post aprenderemos como crear presentaciones usando HTML, CSS bajo un framework hecho en Javascript para facilitar nuestro trabajo en la creación de presentaciones: <a href=\"http://lab.hakim.se/reveal-js/\" target=\"_blank\" rel=\"noopener\">Reveal.js</a>. Palabras mas palabras menos reveal.js se resume en la siguiente presentación hecha por el team mismo de Reveal.js solamente que se encuentra en inglés: Bien, lo primero que necesitamos hacer entonces es descargar reveal.js, esto es bastante sencillo puesto que solo debes ir al siguiente enlace (es una pagina de github) <a href=\"https://github.com/hakimel/reveal.js\" target=\"_blank\" rel=\"noopener\">reveal.js</a> y descargar como zip (veras esta opción en la parte derecha). Una vez descargado este archivo lo vamos a descomprimir y vamos a crear una nueva carpeta donde crearemos nuestras presentaciones. Esta carpeta sugiero que quede con la siguiente estructura (por cuestiones de manejabilidad y escalabilidad): 1. Antes que nada copiaremos de la carpeta de reveal.js a nuestra carpeta de trabajo las siguientes carpetas: css , js , lib , plugin 2. Luego crearemos una carpeta llamada images (o imágenes) donde guardaremos las imágenes que usemos en nuestra presentación. 3. Finalmente crearemos un archivo .html con el nombre de nuestra presentación. En mi caso se llamará tutorial.html. Hecho esto deberíamos tener entonces una carpeta con la siguiente estructura: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/07/folder-structure-reveal.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/07/folder-structure-reveal-300x149.png\" alt=\"folder-structure-reveal\"></a> Bien, ahora que tenemos listo nuestro folder y nuestro archivo vamos a crear nuestra presentación. Abriremos entonces nuestro archivo tutorial.html (O cualquiera que sea el nombre que le hayas puesto a tu archivo) con un editor de texto (en mi caso uso <a href=\"https://atom.io/\" target=\"_blank\" rel=\"noopener\">atom</a> pero notepad++ o incluso bloc de notas funciona bien) y vamos a copiar las siguientes líneas:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!Doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"es\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--Aca tu puedes poner el titulo de la presentación--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>El tutorial de reveal<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Una descripción para que algunos buscadores indexen o cambien la descripción de la presentación según lo que tu quieras\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sebastian Gomez\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black-translucent\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/reveal.css\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/theme/black.css\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"theme\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">Code</span> <span class=\"attr\">syntax</span> <span class=\"attr\">highlighting</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"lib/css/zenburn.css\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">Printing</span> <span class=\"attr\">and</span> <span class=\"attr\">PDF</span> <span class=\"attr\">exports</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'link'</span> );</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlink.rel = <span class=\"string\">'stylesheet'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlink.type = <span class=\"string\">'text/css'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlink.href = <span class=\"built_in\">window</span>.location.search.match( <span class=\"regexp\">/print-pdf/gi</span> ) ? <span class=\"string\">'css/print/pdf.css'</span> : <span class=\"string\">'css/print/paper.css'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'head'</span> )\\[<span class=\"number\">0</span>\\].appendChild( link );</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--\\[if lt IE 9\\]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;script src=\"lib/js/html5shiv.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;!\\[endif\\]--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reveal\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">Ninguno</span> <span class=\"attr\">de</span> <span class=\"attr\">los</span> <span class=\"attr\">elementos</span> <span class=\"attr\">anteriores</span> <span class=\"attr\">es</span> <span class=\"attr\">necesario</span> <span class=\"attr\">que</span> <span class=\"attr\">lo</span> <span class=\"attr\">modifiques</span> <span class=\"attr\">si</span> <span class=\"attr\">no</span> <span class=\"attr\">es</span> <span class=\"attr\">necesario</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">\t\t\t&lt;!\\-\\- Cada etiqueta section que se encuentre adentro del &lt;div class=\"slides\"&gt; representará a una diapositiva  de la presentación --&gt;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slides\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hola<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"comment\">&lt;!--Adentro puede ir cualquier codigo html que será mostrado como diapositiva--&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--El siguiente codigo son los archivos requeridos por reveal.js para funcioanr correctamente, ademas provee una serie de configuraciones con las cuales se puede jugar un poco más adelante--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/js/head.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/reveal.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Full list of configuration options available at:</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// https://github.com/hakimel/reveal.js#configuration</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tReveal.initialize({</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcontrols: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tprogress: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\thistory: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcenter: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttransition: <span class=\"string\">'slide'</span>, <span class=\"comment\">// none/fade/slide/convex/concave/zoom</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"comment\">// Optional reveal.js plugins</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tdependencies: \\[</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'lib/js/classList.js'</span>, <span class=\"attr\">condition</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ <span class=\"keyword\">return</span> !<span class=\"built_in\">document</span>.body.classList; } },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/markdown/marked.js'</span>, <span class=\"attr\">condition</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ <span class=\"keyword\">return</span> !!<span class=\"built_in\">document</span>.querySelector( <span class=\"string\">'\\[data-markdown\\]'</span> ); } },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/markdown/markdown.js'</span>, <span class=\"attr\">condition</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ <span class=\"keyword\">return</span> !!<span class=\"built_in\">document</span>.querySelector( <span class=\"string\">'\\[data-markdown\\]'</span> ); } },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/highlight/highlight.js'</span>, <span class=\"attr\">async</span>: <span class=\"literal\">true</span>, <span class=\"attr\">condition</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ <span class=\"keyword\">return</span> !!<span class=\"built_in\">document</span>.querySelector( <span class=\"string\">'pre code'</span> ); }, <span class=\"attr\">callback</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ hljs.initHighlightingOnLoad(); } },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/zoom-js/zoom.js'</span>, <span class=\"attr\">async</span>: <span class=\"literal\">true</span> },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/notes/notes.js'</span>, <span class=\"attr\">async</span>: <span class=\"literal\">true</span> }</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t\\]</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t});</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Si abres el archivo tutorial.html en tu navegador deberias ver algo similar a esto: Como podemos observar el encabezado de nuestro archivo no va a cambiar mucho. Solamente cambiara el titulo de presentación que se encuentra adentro de las etiquetas <title>, el footer del archivo (desde la linea ### hasta el final) tampoco va a cambiar demasiado salvo que seamos ya expertos y queramos hacer alguna modificación custom. La parte importante se encuentra dentro de las etiquetas section, cada etiqueta section representa una diapositiva y todo lo que pongamos adentro va a mostrarse en una diapositiva, así que creemos unas cuantas diapositivas mas usando las etiquetas básicas de html.</title></p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!Doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"es\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--Aca tu puedes poner el titulo de la presentación--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>El tutorial de reveal<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Una descripción para que algunos buscadores indexen o cambien la descripción de la presentación según lo que tu quieras\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Sebastian Gomez\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black-translucent\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/reveal.css\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/theme/black.css\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"theme\"</span>&gt;</span><span class=\"comment\">&lt;!--Si queremos cambiar el tema simplemente debemos de cambiar aca el archivo .css usado--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">Code</span> <span class=\"attr\">syntax</span> <span class=\"attr\">highlighting</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"lib/css/zenburn.css\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">Printing</span> <span class=\"attr\">and</span> <span class=\"attr\">PDF</span> <span class=\"attr\">exports</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'link'</span> );</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlink.rel = <span class=\"string\">'stylesheet'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlink.type = <span class=\"string\">'text/css'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tlink.href = <span class=\"built_in\">window</span>.location.search.match( <span class=\"regexp\">/print-pdf/gi</span> ) ? <span class=\"string\">'css/print/pdf.css'</span> : <span class=\"string\">'css/print/paper.css'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'head'</span> )\\[<span class=\"number\">0</span>\\].appendChild( link );</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--\\[if lt IE 9\\]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;script src=\"lib/js/html5shiv.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;!\\[endif\\]--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/mi-estilo.css\"</span>&gt;</span><span class=\"comment\">&lt;!--aca puedo tener mis propios estilos css--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reveal\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">Ninguno</span> <span class=\"attr\">de</span> <span class=\"attr\">los</span> <span class=\"attr\">elementos</span> <span class=\"attr\">anteriores</span> <span class=\"attr\">es</span> <span class=\"attr\">necesario</span> <span class=\"attr\">que</span> <span class=\"attr\">lo</span> <span class=\"attr\">modifiques</span> <span class=\"attr\">si</span> <span class=\"attr\">no</span> <span class=\"attr\">es</span> <span class=\"attr\">necesario</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">\t\t\t&lt;!\\-\\- Cada etiqueta section que se encuentre adentro del &lt;div class=\"slides\"&gt; representará a una diapositiva  de la presentación --&gt;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slides\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hola, esta sería la diapositiva 1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"comment\">&lt;!--Adentro puede ir cualquier codigo html que será mostrado como diapositiva--&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Usualmente en esta diapositiva colocamos el tema y la información<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Sebastián Gomez<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Podemos añadir imágenes de manera tan simple como:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/mi-imagen.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"mi-imagen\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Esta sería la diapositiva 3<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Esta diapositiva tendría un párrafo con letra normal<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"letra-roja\"</span>&gt;</span> Este es un párrafo con letra roja<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--El siguiente codigo son los archivos requeridos por reveal.js para funcioanr correctamente, ademas provee una serie de configuraciones con las cuales se puede jugar un poco más adelante--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/js/head.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/reveal.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Full list of configuration options available at:</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// https://github.com/hakimel/reveal.js#configuration</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tReveal.initialize({</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcontrols: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tprogress: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\thistory: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tcenter: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\ttransition: <span class=\"string\">'slide'</span>, <span class=\"comment\">// none/fade/slide/convex/concave/zoom</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"comment\">// Optional reveal.js plugins</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tdependencies: \\[</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'lib/js/classList.js'</span>, <span class=\"attr\">condition</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ <span class=\"keyword\">return</span> !<span class=\"built_in\">document</span>.body.classList; } },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/markdown/marked.js'</span>, <span class=\"attr\">condition</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ <span class=\"keyword\">return</span> !!<span class=\"built_in\">document</span>.querySelector( <span class=\"string\">'\\[data-markdown\\]'</span> ); } },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/markdown/markdown.js'</span>, <span class=\"attr\">condition</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ <span class=\"keyword\">return</span> !!<span class=\"built_in\">document</span>.querySelector( <span class=\"string\">'\\[data-markdown\\]'</span> ); } },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/highlight/highlight.js'</span>, <span class=\"attr\">async</span>: <span class=\"literal\">true</span>, <span class=\"attr\">condition</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ <span class=\"keyword\">return</span> !!<span class=\"built_in\">document</span>.querySelector( <span class=\"string\">'pre code'</span> ); }, <span class=\"attr\">callback</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{ hljs.initHighlightingOnLoad(); } },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/zoom-js/zoom.js'</span>, <span class=\"attr\">async</span>: <span class=\"literal\">true</span> },</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t{ <span class=\"attr\">src</span>: <span class=\"string\">'plugin/notes/notes.js'</span>, <span class=\"attr\">async</span>: <span class=\"literal\">true</span> }</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t\\]</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t});</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Y se vería de esta manera: también se puede cambiar el background de toda la presentación o de cada diapositiva, y jugar un poco con los efectos y las transmisiones tal y como lo podemos observar a continuación.</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reveal\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">Ninguno</span> <span class=\"attr\">de</span> <span class=\"attr\">los</span> <span class=\"attr\">elementos</span> <span class=\"attr\">anteriores</span> <span class=\"attr\">es</span> <span class=\"attr\">necesario</span> <span class=\"attr\">que</span> <span class=\"attr\">lo</span> <span class=\"attr\">modifiques</span> <span class=\"attr\">si</span> <span class=\"attr\">no</span> <span class=\"attr\">es</span> <span class=\"attr\">necesario</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    &lt;!\\-\\- Cada etiqueta section que se encuentre adentro del &lt;div class=\"slides\"&gt; representará a una diapositiva  de la presentación --&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slides\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">data-background</span>=<span class=\"string\">\"#4d7e65\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hola, esta sería la diapositiva 1 con otro fondo<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"comment\">&lt;!--Adentro puede ir cualquier codigo html que será mostrado como diapositiva--&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Usualmente en esta diapositiva colocamos el tema y la información<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Sebastián Gomez<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Adicionalmente la siguiente diapositiva hará una transición tipo zoom<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">data-background</span>=<span class=\"string\">\"#000\"</span> <span class=\"attr\">data-background-transition</span>=<span class=\"string\">\"zoom\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Podemos añadir imágenes de manera tan simple como:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/mi-imagen.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"mi-imagen\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Esta sería la diapositiva 3<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Esta diapositiva tendría un párrafo con letra normal<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"letra-roja\"</span>&gt;</span> Este es un párrafo con letra roja<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Y se vería de ésta manera: Es posible también anidar sections o diapositivas que permitirá crear subsecciones de la presentación bajando o subiendo de nivel</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"reveal\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">Ninguno</span> <span class=\"attr\">de</span> <span class=\"attr\">los</span> <span class=\"attr\">elementos</span> <span class=\"attr\">anteriores</span> <span class=\"attr\">es</span> <span class=\"attr\">necesario</span> <span class=\"attr\">que</span> <span class=\"attr\">lo</span> <span class=\"attr\">modifiques</span> <span class=\"attr\">si</span> <span class=\"attr\">no</span> <span class=\"attr\">es</span> <span class=\"attr\">necesario</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      &lt;!\\-\\- Cada etiqueta section que se encuentre adentro del &lt;div class=\"slides\"&gt; representará a una diapositiva  de la presentación --&gt;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slides\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">data-background</span>=<span class=\"string\">\"#4d7e65\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hola, esta sería la diapositiva 1 con otro fondo<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"comment\">&lt;!--Adentro puede ir cualquier codigo html que será mostrado como diapositiva--&gt;</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Usualmente en esta diapositiva colocamos el tema y la información<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Sebastián Gomez<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Adicionalmente la siguiente diapositiva hará una transición tipo zoom<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">data-background</span>=<span class=\"string\">\"#000\"</span> <span class=\"attr\">data-background-transition</span>=<span class=\"string\">\"zoom\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Podemos añadir imágenes de manera tan simple como:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/mi-imagen.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"mi-imagen\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Esta sería la diapositiva 3<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Esta diapositiva tendría un párrafo con letra normal<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"letra-roja\"</span>&gt;</span> Este es un párrafo con letra roja<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>esta sería la diapositiva 3.1 ya que es una subsección que inicia con la diapositiva 2, por esto está anidada<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Esta diapositiva tendría un párrafo con letra normal<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"letra-roja\"</span>&gt;</span> Este es un párrafo con letra roja<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    \t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>esta sería la diapositiva 3.2<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Esta diapositiva tendría un párrafo con letra normal<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"letra-roja\"</span>&gt;</span> Este es un párrafo con letra roja<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    \t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> 123 3245<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Y esta sería finalmente la diapositiva 4, aquí quedan los enlaces a los distintos temas que se pueden usar para nuestras presentacones y que vienen por defecto:<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">!\\-\\-</span> <span class=\"attr\">Hacks</span> <span class=\"attr\">to</span> <span class=\"attr\">swap</span> <span class=\"attr\">themes</span> <span class=\"attr\">after</span> <span class=\"attr\">the</span> <span class=\"attr\">page</span> <span class=\"attr\">has</span> <span class=\"attr\">loaded.</span> <span class=\"attr\">Not</span> <span class=\"attr\">flexible</span> <span class=\"attr\">and</span> <span class=\"attr\">only</span> <span class=\"attr\">intended</span> <span class=\"attr\">for</span> <span class=\"attr\">the</span> <span class=\"attr\">reveal.js</span> <span class=\"attr\">demo</span> <span class=\"attr\">deck.</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/black.css'); return false;\"</span>&gt;</span>Black (default)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> -</span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/white.css'); return false;\"</span>&gt;</span>White<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> -</span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/league.css'); return false;\"</span>&gt;</span>League<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> -</span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/sky.css'); return false;\"</span>&gt;</span>Sky<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> -</span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/beige.css'); return false;\"</span>&gt;</span>Beige<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> -</span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/simple.css'); return false;\"</span>&gt;</span>Simple<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/serif.css'); return false;\"</span>&gt;</span>Serif<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> -</span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/blood.css'); return false;\"</span>&gt;</span>Blood<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> -</span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/night.css'); return false;\"</span>&gt;</span>Night<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> -</span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/moon.css'); return false;\"</span>&gt;</span>Moon<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> -</span><br><span class=\"line\">  \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.getElementById('theme').setAttribute('href','css/theme/solarized.css'); return false;\"</span>&gt;</span>Solarized<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Y se vería de ésta manera: Es posible también customizar un poco los estilos de nuestra presentación creando modificando el archivo mi-estilo.css de nuestra carpeta css (como he mostrado co la clase letra-roja. Las imágenes que usemos las podemos guardar en nuestra carpeta images y las podemos mostrar en nuestra presentación sin ningún problema simplemente las linkeamos en el src de la etiqueta img, y así podremos crear y tener control de nuestras presentaciones. Eso es todo ahora los invito a crear espectaculares presentaciones con esta simple pero poderosa manera de crear contenido y presentaciones.</p>\n"},{"title":"Conectar y usar Mandrill con Laravel 5","path":"conectar-mandrill-con-laravel-5/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/conectar-mandrill-con-laravel-5/","content":"<p>Una de las grandes necesidades que nos encontramos al realizar cualquier tipo de aplicación es la de enviar emails desde nuestra aplicación. Esto es un problema bastante común que nos plantea distintos enfoques. Uno de ellos es si tercerizar el sistema de envío de e-mails, o si desarrollamos nuestro propio sistema de envío y seguimiento de emails. En este sencillo post muestro como enviar emails usando la API de Mandrill desde Laravel (concretamente estoy usando Laravel 5.1 para algunos de mis proyectos). Antes de empezar necesitamos entender que es Mandrill:<br><a id=\"more\"></a><br>Se trata de un servicio de distribución de correo transaccional que permite el envío de hasta 12.000 correos electrónicos por mes de manera gratuita. Si se necesita más, hay varias opciones a precios asequibles. Mandrill brinda soporte para registros SPF y DKIM que garantizan que su correo electrónico no será considerado como spam por la mayor parte de los servicios de e-mail. Además, permite el seguimiento de estados de correo electrónico, como enviar, rebotados, recibidas, hecho clic, marcados como spam, etc. También es compatible con las plantillas y etiquetas especiales para las pruebas A / B, lo cual siempre es una ventaja. (Tomado de:<a href=\"http://altoros.com.ar/blog/mandrill-servidor-smtp-gratuito-aplicaciones/\" target=\"_blank\" rel=\"noopener\"> http://altoros.com.ar/blog/mandrill-servidor-smtp-gratuito-aplicaciones/</a>)</p>\n<p>Adicionalmente ofrece soporte para ser usado via API por diferentes plataformas y lenguajes de programación, entre ellos PHP, RUBY, PYTHON, NODEJS  y JAVASCRIPT. Empecemos, el ejemplo que haremos consistirá en enviar un email via Mandrill APP desde Laravel 5. Para ello necesitamos tener una cuenta en <a href=\"https://mandrillapp.com/\" target=\"_blank\" rel=\"noopener\">mandrillAPP</a>. Una vez allí iremos a la pestaña Settings y se nos mostrará un botón en la parte inferior desde donde podremos crear nuestra API key. (Para esto ya deberías tener configurado tu cuenta de correo y servidor SMTP). <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/apiKeyMadrill.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/apiKeyMadrill.png\" alt=\"apiKeyMadrill\"></a> Luego de esto iremos hasta la pestaña Outbounds y la tab “templates”. Allí crearemos nuestro template (haciendo click en el botón, “+create new template”) en este caso haremos el simple “Hola mundo”. <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/mandrillHolaMundo.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/mandrillHolaMundo-300x123.png\" alt=\"mandrillHolaMundo\"></a> Al finalizar haremos click en publish. eso es todo lo que necesitamos del lado de Mandrill ahora pasemonos a nuestro proyecto de laravel. Voy a suponer que ya tienes un proyecto de Laravel al menos con un controlador y una ruta que puedas usar en mi caso tengo un controller llamado UsersController el cual tiene un solo método llamado welcomeEmail y cuya Ruta es <a href=\"http://localhost/my-proyecto/test_email\" target=\"_blank\" rel=\"noopener\">http://localhost/my-proyecto/test_email</a> por tanto al acceder a esa ruta estaría llegando inmediatamente a este método. Ahora bien lo primero que necesitamos para poder acceder a la API de Mandrill desde laravel son la librería de Mandrill y una librería llamada Weblee que nos facilitará el acceso, dicho esto nuestro composer.json debería quedar de la siguiente manera (puede variar segun tu propio proyecto):</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"string\">\"name\"</span>: <span class=\"string\">\"laravel/laravel\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"description\"</span>: <span class=\"string\">\"The Laravel Framework.\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"keywords\"</span>: \\[<span class=\"string\">\"framework\"</span>, <span class=\"string\">\"laravel\"</span>\\],</span><br><span class=\"line\">\t<span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"type\"</span>: <span class=\"string\">\"project\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"require\"</span>: {</span><br><span class=\"line\">\t\t<span class=\"string\">\"php\"</span>: <span class=\"string\">\"&gt;=5.5.9\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"laravel/framework\"</span>: <span class=\"string\">\"5.1.*\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"illuminate/html\"</span>: <span class=\"string\">\"~5.0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"intervention/image\"</span>:<span class=\"string\">\"2.*\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"barryvdh/laravel-cors\"</span>: <span class=\"string\">\"0.5.x@dev\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"orangehill/iseed\"</span>: <span class=\"string\">\"dev-master\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"weblee/mandrill\"</span>: <span class=\"string\">\"dev-master\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"mandrill/mandrill\"</span>: <span class=\"string\">\"1.0.*\"</span></span><br><span class=\"line\">\t},</span><br><span class=\"line\">\t<span class=\"string\">\"require-dev\"</span>: {</span><br><span class=\"line\">\t\t<span class=\"string\">\"fzaninotto/faker\"</span>: <span class=\"string\">\"~1.4\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"mockery/mockery\"</span>: <span class=\"string\">\"0.9.*\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"phpunit/phpunit\"</span>: <span class=\"string\">\"~4.0\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"phpspec/phpspec\"</span>: <span class=\"string\">\"~2.1\"</span></span><br><span class=\"line\">\t},</span><br><span class=\"line\">\t<span class=\"string\">\"autoload\"</span>: {</span><br><span class=\"line\">\t\t<span class=\"string\">\"classmap\"</span>: \\[</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"database\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"app/Http/Controllers\"</span></span><br><span class=\"line\">\t\t\\],</span><br><span class=\"line\">\t\t<span class=\"string\">\"psr-4\"</span>: {</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"App\\\\\\\": \"</span>app/<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t}</span></span><br><span class=\"line\"><span class=\"string\">\t},</span></span><br><span class=\"line\"><span class=\"string\">\t\"</span>autoload-dev<span class=\"string\">\": {</span></span><br><span class=\"line\"><span class=\"string\">\t\t\"</span>classmap<span class=\"string\">\": \\[</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"</span>tests/TestCase.php<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\\]</span></span><br><span class=\"line\"><span class=\"string\">\t},</span></span><br><span class=\"line\"><span class=\"string\">\t\"</span>scripts<span class=\"string\">\": {</span></span><br><span class=\"line\"><span class=\"string\">\t\t\"</span>post-install-cmd<span class=\"string\">\": \\[</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"</span>php artisan clear-compiled<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"</span>php artisan optimize<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\\],</span></span><br><span class=\"line\"><span class=\"string\">\t\t\"</span>post-update-cmd<span class=\"string\">\": \\[</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"</span>php artisan clear-compiled<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"</span>php artisan optimize<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\\],</span></span><br><span class=\"line\"><span class=\"string\">\t\t\"</span>post-create-project-cmd<span class=\"string\">\": \\[</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"</span>php -r \\\\<span class=\"string\">\"copy('.env.example', '.env');\\\\\"</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"</span>php artisan key:generate<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\\]</span></span><br><span class=\"line\"><span class=\"string\">\t},</span></span><br><span class=\"line\"><span class=\"string\">\t\"</span>config<span class=\"string\">\": {</span></span><br><span class=\"line\"><span class=\"string\">\t\t\"</span>preferred-install<span class=\"string\">\": \"</span>dist<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">\t},</span></span><br><span class=\"line\"><span class=\"string\">\t\"</span>minimum-stability<span class=\"string\">\": \"</span>dev<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">\t\"</span>prefer-stable<span class=\"string\">\": true</span></span><br><span class=\"line\"><span class=\"string\">}</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Una vez que hagamos esto debemos correr nuestro comando composer update para que se instalen dichas librerías. Ahora necesitamos configurar nuestro archivo config/mail.php con nuestras credenciales(en caso de que no lo hayas hecho) y debemos actualizar nuestro archivo config/services.php con nuestra mandrill API key:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'mandrill'</span> =&gt; \\[</span><br><span class=\"line\">      <span class=\"string\">'secret'</span> =&gt; env(<span class=\"string\">'MANDRILL_KEY'</span>),</span><br><span class=\"line\">  \\],</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Adicionalmente debemos agregar lo providers de las librerias añadidas:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'providers'</span> =&gt; \\[</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t<span class=\"string\">'Weblee\\\\Mandrill\\\\MandrillServiceProvider'</span></span><br><span class=\"line\">\\],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aliases'</span> =&gt; \\[</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t<span class=\"string\">'MandrillMail'</span>  =&gt; <span class=\"string\">'Weblee\\\\Mandrill\\\\MandrillFacade'</span></span><br><span class=\"line\">\\]</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Bien, hecho lo anterior tenemos listo nuestra app de Laravel para usar la API de Mandrill desde el controller, simplemente nos queda incluir el NameSpace en el encabezado de nuestro controller use Weblee\\Mandrill\\Mail; y creamos las siguientes dos funciones en nuestro controller:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">php</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight php\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Send Welcome Email throught mandriall APP</span></span><br><span class=\"line\"><span class=\"comment\">* https://mandrillapp.com/api/docs/messages.php.html</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span>  int  $activationLink</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span>  int  $userEmail</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span>  int  $userName</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">welcomeEmail</span><span class=\"params\">($userEmail,$userName)</span></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>{</span><br><span class=\"line\">\t\t$template_name = <span class=\"string\">'hola mundo'</span>;</span><br><span class=\"line\">\t\t$template_content = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'name'</span> =&gt; <span class=\"string\">'test'</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'content'</span> =&gt; <span class=\"string\">'test'</span></span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t$message = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'to'</span> =&gt; <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'email'</span> =&gt;\t$userEmail,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'name'</span> \t=&gt; \t$userName,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'type'</span> \t=&gt; <span class=\"string\">'to'</span></span><br><span class=\"line\">\t\t\t\t)</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t$result = \\\\MandrillMail::messages()-&gt;sendTemplate($template\\_name, $template\\_content, $message);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>($result\\[<span class=\"number\">0</span>\\]\\[<span class=\"string\">\"status\"</span>\\]==<span class=\"string\">\"sent\"</span> <span class=\"keyword\">AND</span> !$result\\[<span class=\"number\">0</span>\\]\\[<span class=\"string\">\"reject_reason\"</span>\\]){</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>{</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span>(Exeption $e){</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testEmail</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;welcomeEmail(<span class=\"string\">\"example@gmail.com\"</span>,<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>En ocaciones algunas personas se pueden encontrar con errores de certificado SSL de Mandrill, esto se debe a que probablemente no estan usando el protocolo HTTPS, esto se soluciona bastante facil al editar el archivo mandrill.php en la linea 65 añadiendo las siguientes dos lineas. curl_setopt($this-&gt;ch, CURLOPT_SSL_VERIFYHOST, 0); curl_setopt($this-&gt;ch, CURLOPT_SSL_VERIFYPEER, 0); Una vez hecho esto tendremos conectado laravel con Mandrill y podremos enviar los emails de nuestra APP atraves de un Servidor especializado de correos con todas las características que éste ofrece.</p>\n"},{"title":"Como consumir APIs REST usando AngularJS","path":"como-consumir-apis-rest-usando-angularjs/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/como-consumir-apis-rest-usando-angularjs/","content":"<p>En este pequeño post quiero mostrar un ejemplo sencillo de como usar angularJS para realizar consultas o peticiones a APIs rest propias o de terceros, <a id=\"more\"></a> ya que hoy en día nos encontramos en pleno auge de angularJS y de las arquitecturas orientadas a servicios (Usando servicios Rest, Sobra decir que SOAP esta out). Lo primero que quiero compartir es la API que consumiremos, esta es <a href=\"http://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"noopener\">JSONPlaceholder</a>, allí verán una pequeña introducción de como usarla y los recursos disponible para ser accesados vía API. El ejemplo que haremos sera entonces consumir los servicios de posts, traeremos todos los posts disponibles, y también traeremos un post por id. Los pasos que seguiremos serán entonces: 1. Creación de una vista que tenga dos botones. El primer botón traerá todos los post ofrecidos por la API, y el segundo botón traerá un post especifico de acuerdo al id que ingresemos. 2. Crearemos un controlador que nos permita recibir la acción de cada uno de los botones y que sea este el encargado de llamar al servicio y recibir los datos de este para ser mostrados en la vista. 3. Crearemos el mecanismo de consumo de la API que sera una factory de angular, que nos permitirá declarar los métodos y las rutas a ser consumidas en la API. 4. Finalmente Haremos una pequeña prueba para verificar el correcto funcionamiento de esta. Eso es todo manos a la obra!!! Lo primero que haremos sera crear una estructura del proyecto como la siguiente: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/estructura-del-proyecto.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/estructura-del-proyecto.png\" alt=\"estructura del proyecto\"></a> Luego dentro del archivo index.html copiaremos el siguiente código html:</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">html</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight html\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">'myApp'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--Controllers--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"controllers/testController.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--Services--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"services/testService.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">'myApp'</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"testController\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Todos los posts\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"getAllPosts()\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Un post\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"getPost()\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"post_id\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"inserte el id del post\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-if</span>=<span class=\"string\">\"posts.exist==1\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Lista de Posts<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"p in posts\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span> Post # { {p.id}}<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>{ {p.title}}<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>{ {p.body}}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-if</span>=<span class=\"string\">\"unPost.exist==1\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Un solo post<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span> Post # { {unPost.id}}<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>{ {unPost.title}}<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>{ {unPost.body}}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Arriba en la etiqueta html tenemos el nombre de nuestra app, en este caso el nombre es myApp (esto puede ser cambiado a gusto). Como podemos ver dentro de las etiquetas <head><link rel=\"manifest\" href=\"/manifest.json\"> tenemos la libreria de angular incluida, para ello esta puede ser descargada via bower, o simplemente puedes linkearla directamente desde el cdn de google, accesible desde <a href=\"https://angularjs.org/\" target=\"_blank\" rel=\"noopener\">angularjs.org</a> Luego tenemos nuestro controlador y nuestro servicio enlazado a nuestra vista. Posteriormente tenemos asociado el controlador para todo nuestro body, en nuestro caso es el testController. Dentro del body tenemos entonces dos botones y div resultado, cada botón tiene asociado un ng-click que llama directamente a cada función del controller, y el div que simplemente tiene asociado un modelo, donde seran seteados los datos. El flujo sera entonces cuando hagamos click en cualquiera de los dos botones se llamara la funcion del controller y este a su vez llamara al servicio para que consuma el método de la API destinado para esto. Pasemos al controlador</head></p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, [<span class=\"string\">'testService'</span>]);</span><br><span class=\"line\">angular.module(<span class=\"string\">'myApp'</span>).controller(<span class=\"string\">'testController'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"string\">'testRequest'</span>,testController]);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testController</span>(<span class=\"params\">$scope, testRequest</span>) </span>{</span><br><span class=\"line\">\t$scope.posts={};</span><br><span class=\"line\">\t$scope.getAllPosts = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">\t\ttestRequest.posts().success(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>{</span><br><span class=\"line\">\t\t\t$scope.posts=data; <span class=\"comment\">// Asignaremos los datos de todos los posts</span></span><br><span class=\"line\">\t\t\t$scope.posts.exist=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t});</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t$scope.getPost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">\t\t$scope.unPost={};</span><br><span class=\"line\">\t\ttestRequest.post($scope.post_id).success(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>{</span><br><span class=\"line\">\t\t\t$scope.unPost=data; <span class=\"comment\">// Asignaremos los datos del post</span></span><br><span class=\"line\">\t\t\t$scope.unPost.exist=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t$scope.posts.exist=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t});</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>El código del controlador es relativamente sencillo, simplemente declaramos nuestro modulo y nuestro controller. Dentro tendremos dos funciones una para obtener todos los posts y otra para obtener un post con un Id especifico, luego estas funciones llaman el servicio y reciben los datos de este y es asignado a una variable dentro del scope, esto con el fin de que le controller en caso de que existan pueda devolverlos a la vista para ser mostrados. Pasemos al servicio</p>\n<figure class=\"codeblock codeblock--tabbed\"><figcaption><ul class=\"tabs\"><li class=\"tab active\">js</li></ul></figcaption><div class=\"tabs-content\"><figure class=\"highlight js\" style=\"display: block;\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'testService'</span>, [])<span class=\"comment\">//Declaramos el modulo</span></span><br><span class=\"line\">.factory(<span class=\"string\">'testRequest'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http</span>) </span>{ <span class=\"comment\">//declaramos la factory</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> path = <span class=\"string\">\"http://jsonplaceholder.typicode.com/\"</span>;<span class=\"comment\">//API path</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> {</span><br><span class=\"line\">\t\t<span class=\"comment\">//Login</span></span><br><span class=\"line\">\t\tposts : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{ <span class=\"comment\">//Retornara la lista de posts</span></span><br><span class=\"line\">\t\t\tglobal = $http.get(path+<span class=\"string\">'posts'</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> global;</span><br><span class=\"line\">\t\t},</span><br><span class=\"line\">\t\tpost : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>{ <span class=\"comment\">//retornara el post por el id</span></span><br><span class=\"line\">\t\t\tglobal = $http.get(path+<span class=\"string\">'posts/'</span>+id);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> global;\t</span><br><span class=\"line\">\t\t}\t</span><br><span class=\"line\">\t}</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure></div></figure>\n<p>Al comienzo se declara el modulo y se crea una variable llamada PATH con el fin de que este servicio sea portable en caso de que cambie la dirección de la API. Inicialmente el servicio se declara como una factory donde tendremos dos funciones, una para cada operación. Dicha factory utiliza el metodo http de angular para que pueda crear la petición REST a la API Posteriormente están los dos métodos que hacen la petición GET a la API y retornan la respuesta al controller quien a su vez asigna las variables al SCOPE para ser usados en la vista. Hecho todo lo anterior estamos listos para probar nuestra pequeña app:</p>\n<p><strong>Vista Inicial</strong></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/1-300x36.png\" alt=\"1\"></a></p>\n<p><strong>Lista de todos los post:</strong></p>\n<p><a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/2-300x240.png\" alt=\"2\"></a></p>\n<p><strong>Vista de un solo post: </strong></p>\n<p><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/06/3-300x249.png\" alt=\"3\"> Listo como ven es muy sencillo el consumo de APIs con angularJS, quizá hayan formas mejores de hacerlo, sin embargo esta es una forma completamente funcional y validada. Espero les sea de utilidad.</p>\n"},{"title":"Creación de un VHOST en Windows y XAMPP","path":"creacion-de-un-vhost-en-windows-y-xampp/","permalink":"https://sebastian-gomez-blog.firebaseapp.com/creacion-de-un-vhost-en-windows-y-xampp/","content":"<p>Un VHOST o virtual host, es un apuntador interno que tendremos en nuestro computador a alguna aplicación web nuestra bajo un dominio o nombre que deseemos establecerle. Es decir si tenemos un proyecto en una carpeta dentro de XAMPP C:/xampp/htdocs/my-proyecto y su respectiva dirección local <a href=\"http://localhost/my-proyecto\" target=\"_blank\" rel=\"noopener\">http://localhost/my-proyecto</a> podremos facilmente crear un dominio ficticio dentro de nuestra máquina a dicho proyecto por ejemplo <a href=\"http://www.my-proyecto.com\" target=\"_blank\" rel=\"noopener\">www.my-proyecto.com</a> (esto solo será accesible desde nuestra máquina). En este sencillo post mostraré un pequeño tutorial de como crear un Virtual Host (VHost) en Windows y un servidor Apache como XAMPP. Como prerequisito entonces tendremos que tener instalado XAMPP (el link es <a href=\"https://www.apachefriends.org/es/index.html\" target=\"_blank\" rel=\"noopener\">este</a> ). <a id=\"more\"></a></p>\n<ol>\n<li>Ubicar la carpeta C:\\Windows\\System32\\Drivers\\etc</li>\n<li>Abrir el archivo hosts con un editor de texto.</li>\n<li>Añadir la siguiente linea al final del archivo</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span>       <span class=\"selector-tag\">www</span><span class=\"selector-class\">.my-proyecto</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure>\n<p>La url <a href=\"http://www.my-proyecto.com\" target=\"_blank\" rel=\"noopener\">www.my-proyecto.com</a> puede ser cambiada por el nombre que se desee, e incluso es posible tener varios subdominios, por ejemplo testing.my-proyecto-com, production.my-proyecto.com, etc etc y la dirección 127.0.0.1 nunca cambia a menos que tu hayas cambiado la configuración de hosts de windows. Hecho lo anterior entonces debemos abrir XAMPP y se mostrara la consola inicial: <a href=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/05/xampp.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2015/05/xampp-300x109.png\" alt=\"xampp\"></a>   En esta consola haremos click sobre el boton config de la fila correspondiente al Apache y seleccionaremos el archivo httdp.conf, hecho esto se nos abrirá una documento de texto. Iremos hasta el final del documento.</p>\n<p>#El signo de numeral permite ingresar comentarios</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">&lt;VirtualHost *:80&gt;</span></span><br><span class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">DocumentRoot</span></span> /xampp/htdocs/my-proyecto</span><br><span class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">ServerName</span></span> www.my-proyecto.com</span><br><span class=\"line\"><span class=\"section\">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Note que el puerto 80 representa el puerto donde el apache se encuentra corriendo, si usted esta usando otro puerto debe cambiarlo en la segunda linea. El DocumentRoot indica la ruta física en el disco donde se encuentra el proyecto, y finalmente el server name debe apuntar a la dirección local que creamos en nuestro archivo hosts de windows. Espero que sea de utilidad.</p>\n"}]}